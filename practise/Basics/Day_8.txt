// combination sum 

class Solution {


    void solve(vector<int> candidates,vector<vector<int>> &ans,int sum,vector<int> sample,int target,int index){
        if(sum  > target){ 
            return; 
        }

        if(sum == target){
            ans.push_back(sample);
            return;  
        }

        // for(int i = 0; i < sample.size(); i ++){
        //     cout << sample[i] << " "; 
        // }
        cout << endl; 
        for(int i = index;i < candidates.size(); i ++){
            sample.push_back(candidates[i]); 
            sum += candidates[i]; 
            solve(candidates,ans,sum,sample,target,i); 
            sum -= candidates[i]; 
            sample.pop_back(); 
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> sample; 
        vector<vector<int>> ans; 
        int sum = 0; 
        int index = 0; 
        solve(candidates,ans,sum,sample,target,index); 
        return ans; 
    }
};

// combination sum 2
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) 
    {
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans={};
        vector<int> v;
        comb(0,nums,v,ans,target);
        return ans;
    }
    void comb(int start,vector<int>& nums,vector<int>& v,vector<vector<int>>&ans,int target)
    {
        if(target==0)
        {
            ans.push_back(v);
            return;
        }
        if(target<0)
        return;
        for(int i=start;i<nums.size();i++)
        {
            if(i>start&&nums[i]==nums[i-1])continue;
            v.push_back(nums[i]);
            comb(i+1,nums,v,ans,target-nums[i]);
            v.pop_back();
        }
    }
};