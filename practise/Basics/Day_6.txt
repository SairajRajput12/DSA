//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

class SortedStack{
public:
	stack<int> s;
	void sort();
};

void printStack(stack<int> s)
{
    while (!s.empty())
    {
        printf("%d ", s.top());
       	s.pop();
    }
    printf("\n");
}

int main()
{
int t;
cin>>t;
while(t--)
{
	SortedStack *ss = new SortedStack();
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
	int k;
	cin>>k;
	ss->s.push(k);
	}
	ss->sort();
	printStack(ss->s);
}
}
// } Driver Code Ends


/*The structure of the class is
class SortedStack{
public:
	stack<int> s;
	void sort();
};
*/

/* The below method sorts the stack s 
you are required to complete the below method */

void sortedInsert(stack<int> &s,int top){
    if(s.size() == 0){
        s.push(top); 
        return; 
    }
    
    if(s.top() > top){
        int x = s.top(); 
        s.pop(); 
        sortedInsert(s,top); 
        s.push(x); 
    }
    else{
        s.push(top);
    }
}

void SortedStack :: sort()
{
   //Your code here
   if(s.size() == 0){
       return; 
   }
   
   int top = s.top();
   s.pop(); 
   sort(); 
   sortedInsert(s,top); 
  
}

// genrate parenthesis 

class Solution {
public:

    void solve(int n,string &am,int open,int close,vector<string> &answer){
        if(open == n and close == n){
            answer.push_back(am); 
            return; 
        }

        if(close > open or close > n){
            return; 
        }

        if(open > n){
            return; 
        }

        am = am + "("; 
        solve(n,am,open+1,close,answer); 
        am.pop_back(); 
        am = am + ")"; 
        solve(n,am,open,close+1,answer); 
        am.pop_back();
    }

    vector<string> generateParenthesis(int n) {
        vector<string> answer;
        string am = "";  
        solve(n,am,0,0,answer); 
        return answer; 
    }
};