// topic : recursion questions 

class Solution {
public:

    // int solve(string s,int sign,int i,long result){
    //     if(sign*result>=INT_MAX)
    //     {
    //         return INT_MAX;
    //     }
    //     if(sign*result<=INT_MIN)
    //     {
    //         return INT_MIN;
    //     }
    //     if(i>=s.size() || s[i]<'0' || s[i]>'9')
    //     {
    //         return sign*result;
    //     }
    //     result = solve(s,sign,i+1,(result*10+(s[i]-'0')));
    //     return result;

    // }


    

    void getAns(long long &ans, string s,int index,int sign){
        if(index == s.size()){
            return; 
        }

        if(((s[index] >= 'a' and s[index] <= 'z') or (s[index] >= 'A' and s[index] <= 'Z'))){
            cout << s[index] << endl;
            return; 
        }

        // if(s[index] == '-' or s[index] == '.' or s[index] == '+'){
        //     return; 
        // }

        if(sign*ans >= INT_MAX){
            ans = INT_MAX; 
            return;
        } 

        if(sign*ans <= INT_MIN){
            ans = INT_MIN; 
            return; 
        }

        if(s[index] >= '0' and s[index] <= '9'){
            char c = s[index]; 
            ans = ans*10 + (int)(c-'0');
        }
        else{
            return; 
        }
        getAns(ans,s,index+1,sign); 
    }


    long long solve(string s,int index,int sign,long long answer){
        if(answer*sign >= INT_MAX){
            return INT_MAX; 
        }

        if(answer*sign <= INT_MIN){
            return INT_MIN; 
        }

        if(s[index] == ' ' or !(s[index] >= '0' and s[index] <= '9')){
            return sign*answer; 
        }

        int digit = s[index] - '0'; 
        return solve(s,index+1,sign,answer*10+digit); 

    }
    

    int myAtoi(string s) {
        long long answer = 0; 
        int index = 0; 
        int sign = 1; 
        int flag = 0; 

        while(index < s.size() and s[index] == ' '){
            index ++; 
        }

        if(s[index] == '-'){
            flag ++; 
            sign = -1; 
            index ++; 
        }

        if(s[index] == '+'){
            flag ++; 
            sign = 1;
            index ++; 
        }

        if(flag > 1){
            // means the string has 2 sign and we will not process it
            return 0; 
        }

        return solve(s,index,sign,0);


    }
};

class Solution {
public:
    double solve(double x,int n){
        if(n == 0){
            return 1.0; 
        }
        return x*solve(x,n-1); 
    }

    double myPow(double x, int n) {
        // int sample = n; 
        // if(n == INT_MAX){
        //     return (x == 1) ? 1 : (x == -1) ? -1 : 0;
        // }

        // if(n == INT_MIN){
        //     return (x == 1 || x == -1) ? 1 : 0;
        // }

        // double num = 1; 
        // if(n >= 0){
        //     num = solve(x,n);
        // }
        // else{
        //     n = -n; // make it un negative
        //     num = solve(x,n); 
        //     num = 1.0/num; 
        // }
        // return num; 
    
        if(n == 0){
            return 1; 
        }

        if(n < 0){
            n = abs(n); 
            x = 1/x; 
        }

        if(n%2 == 0){
            return myPow(x*x,n/2); 
        }
        else{
            return x*myPow(x,n-1); 
        }
    
    }
};


// count good numbers 

#define mod 1000000007
class Solution {
public:

    void solve(int &answer,string sam,long long n,long long ind,int index){
        if(ind > n){
            return; 
        }

        if(ind%2 == 0 and index%2 == 0){
            answer = answer + 1; 
        }

        if(ind%2 != 0 and (index == 2 or index == 3 or index == 5 or index == 7)){
            answer = answer + 1; 
        }

        // put a character then go for recursive call and remove it 
        for(int i = 0; i <= 9; i ++){
            sam = sam + to_string(index); 
            solve(answer,sam,n,ind+1,i); 
            sam.pop_back();  
        }
    }

    long long powe(long long x,long long y){
        if(y == 0){
            return 1; 
        }

        long long ans = powe(x,y/2); 
        ans *= ans; 
        ans = ans%mod; 
        if(y%2 == 1){
            ans *= x; 
            ans = ans%mod; 
        }
        return ans; 
    }

    int countGoodNumbers(long long n) {
        long long even_part = n/2+n%2; 
        long long odd_part = n/2; 
        return (powe(5,even_part)*powe(4,odd_part))%mod; 
    }
};