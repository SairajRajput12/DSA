// topic : recursion questions 

class Solution {
public:

    // int solve(string s,int sign,int i,long result){
    //     if(sign*result>=INT_MAX)
    //     {
    //         return INT_MAX;
    //     }
    //     if(sign*result<=INT_MIN)
    //     {
    //         return INT_MIN;
    //     }
    //     if(i>=s.size() || s[i]<'0' || s[i]>'9')
    //     {
    //         return sign*result;
    //     }
    //     result = solve(s,sign,i+1,(result*10+(s[i]-'0')));
    //     return result;

    // }


    

    void getAns(long long &ans, string s,int index,int sign){
        if(index == s.size()){
            return; 
        }

        if(((s[index] >= 'a' and s[index] <= 'z') or (s[index] >= 'A' and s[index] <= 'Z'))){
            cout << s[index] << endl;
            return; 
        }

        // if(s[index] == '-' or s[index] == '.' or s[index] == '+'){
        //     return; 
        // }

        if(sign*ans >= INT_MAX){
            ans = INT_MAX; 
            return;
        } 

        if(sign*ans <= INT_MIN){
            ans = INT_MIN; 
            return; 
        }

        if(s[index] >= '0' and s[index] <= '9'){
            char c = s[index]; 
            ans = ans*10 + (int)(c-'0');
        }
        else{
            return; 
        }
        getAns(ans,s,index+1,sign); 
    }


    long long solve(string s,int index,int sign,long long answer){
        if(answer*sign >= INT_MAX){
            return INT_MAX; 
        }

        if(answer*sign <= INT_MIN){
            return INT_MIN; 
        }

        if(s[index] == ' ' or !(s[index] >= '0' and s[index] <= '9')){
            return sign*answer; 
        }

        int digit = s[index] - '0'; 
        return solve(s,index+1,sign,answer*10+digit); 

    }
    

    int myAtoi(string s) {
        long long answer = 0; 
        int index = 0; 
        int sign = 1; 
        int flag = 0; 

        while(index < s.size() and s[index] == ' '){
            index ++; 
        }

        if(s[index] == '-'){
            flag ++; 
            sign = -1; 
            index ++; 
        }

        if(s[index] == '+'){
            flag ++; 
            sign = 1;
            index ++; 
        }

        if(flag > 1){
            // means the string has 2 sign and we will not process it
            return 0; 
        }

        return solve(s,index,sign,0);


    }
};