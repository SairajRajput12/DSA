/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& d) {
        // this is my logic: 
        // 1. create a map for storing the nodes 
        // iterate thrrough each element of the given array 
        unordered_map<int,TreeNode*> mp; 
        unordered_set<int> st; 

        for(auto it : d){
            int parent = it[0]; 
            int child = it[1]; 
            int left = it[2]; 

            if(mp.find(parent) == mp.end()){
                mp[parent] = new TreeNode(parent); 
            }

            if(mp.find(child) == mp.end()){
                mp[child] = new TreeNode(child); 
            }

            if(left == 0){
                mp[parent] -> right =  mp[child];
            }
            else{
                mp[parent] -> left = mp[child]; 
            }

            st.insert(child); 
        }

        for(auto it : d){
            int parent = it[0]; 
            if(st.find(parent) == st.end()){
                return mp[parent]; 
            }
        }

        return nullptr; 

    }
};