class Solution {
public:
    vector<int> intersect(vector<int> nums1, vector<int> nums2) {
        vector<int> answer; 

        // using double loop: brute force approach 
        // for(int i = 0; i < nums1.size(); i ++){
        //     for(int j = 0; j < nums2.size(); j ++){
        //         if(nums1[i] == nums2[j] and nums2[j] != -1){
        //             answer.push_back(nums1[i]); 
        //             nums2[j] = -1; 
        //             break; 
        //         }
        //     }
        // }


        // using 2 pointer appraoch 
        // sort(nums1.begin(),nums1.end()); 
        // sort(nums2.begin(),nums2.end()); 

        // int start1 = 0; 
        // int start2 = 0; 
        // int end1 = nums1.size(); 
        // int end2 = nums2.size(); 

        // while(start1 < end1 and start2 < end2){
        //     if(nums1[start1] == nums2[start2]){
        //         answer.push_back(nums1[start1]); 
        //         start1 ++; 
        //         start2 ++; 
        //     }else if(nums1[start1] > nums2[start2]){
        //         start2 ++; 
        //     }
        //     else{
        //         start1 ++; 
        //     }
        // }

        // return answer;


        // approach 3: another approach using map 
        unordered_map<int,int> mp; 
        if(nums1.size() > nums2.size()){
            swap(nums1,nums2); 
        }

        for(auto it : nums1){
            mp[it] ++; 
        }

        int Idx = 0; 

        for(auto val : nums2){
            if(mp[val] > 0){
                nums1[Idx ++] = val; 
                mp[val] --; 
            }
        }

        return vector<int> (nums1.begin(),nums1.begin()+Idx); 
    }
};