class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // brute force appraoch 
        // for(int i = 0; i < nums.size(); i ++){
        //     int cnt = 1; 
        //     int pivot = nums[i]; 
        //     for(int j = 0; j < nums.size(); j ++){
        //         if(nums[j] == pivot){
        //             cnt ++; 
        //         }
        //     }

        //     if(cnt > (nums.size())/2+1){
        //         return pivot; 
        //     }
        // }
        // return -1;


        // approach 2: with some extra space 
        // unordered_map<int,int> mp; 

        // for(int i = 0; i < nums.size(); i ++){
        //     mp[nums[i]] ++; 
        // }


        // for(auto it : mp){
        //     if(it.second > (nums.size()/2)){
        //         return it.first; 
        //     }
        // }

        // return -1;

        // approach 3: 

        // if(nums.size() == 1){
        //     return nums[0]; 
        // }
        // int cnt = nums.size()/2; 
        // sort(nums.begin(),nums.end()); 
        // int pr = 1,prev = nums[0]; 
        // for(int i = 1; i < nums.size(); i ++){
        //     if(prev == nums[i]){
        //         pr ++; 
        //     }
        //     else{
        //         pr = 1; 
        //         prev = nums[i];
        //     }

        //     if(pr > cnt){
        //         return nums[i]; 
        //     }
        // } 
        // return -1; 
    }
};