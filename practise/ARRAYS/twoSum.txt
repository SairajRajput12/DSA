class Solution {
public:
    pair<bool,int> get(int t,vector<pair<int,int>>& a,int index){
        int left = 0,right = index-1; 

        while(left <= right)
        {
            int mid = left + (right - left)/2; 

            if(a[mid].first > t){
                right = mid - 1; 
            }
            else if(a[mid].first < t){
                left = mid + 1; 
            }
            else{
                return {true,a[mid].second}; 
            }
        }

        return {false,-1}; 
    }

    vector<int> twoSum(vector<int>& a, int t) {
        // unordered_map<int,int> mp; 
        // int index = 0; 
        // for(auto it : nums){
        //     mp[it] = index; 
        //     index ++; 
        // }

        // for(int i = 0; i < nums.size(); i ++){
        //     if(mp.find(target-nums[i]) != mp.end() and i != mp[target-nums[i]]){
        //         return {i,mp[target-nums[i]]}; 
        //     }
        // }
        // return {-1,-1}; 

        // vector<pair<int,int>> v;
		// int n=a.size(),x,y;
		// for(int i=0;i<a.size();i++)
		// 	v.push_back({a[i],i});
		// sort(v.begin(),v.end());
        // int i = 0; 
        // for(auto it : v){
        //     int e = it.first; 
        //     int in = it.second; 

        //     auto response = get((t-e),v,i); 

        //     if(response.first == true){
        //         return {in,response.second};
        //     }
        //     i ++; 
        // }

        // return {-1,-1};

        // dp 
         

    }
};