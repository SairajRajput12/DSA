class Node{
public: 
    Node* children[26]; 
    char data; 
    bool isTerminal; 

    Node(char data){
        this -> data = data; 
        for(int i = 0; i < 26; i ++){
            this -> children[i] = NULL; 
        }
        this -> isTerminal = false; 
    }
};

class Trie{
public: 
Node* ans; 
    Trie(char ch){
        ans = new Node(ch);
    }

    void insertUtility(string x,Node* root)
    {
        if(x.size() == 0)
        {
            root->isTerminal = true;
            return;
        }

        Node* child;
        int index = x[0] - 'a';
        if(root->children[index] == NULL)
        {
            child = new Node(x[0]);
            root->children[index] = child;
        }
        else{
            child = root->children[index]; 
        }
        insertUtility(x.substr(1),child); 
    }

    void insert(string x)
    {
        insertUtility(x,ans);
    }

    void createString(string check,string &ans1){
        Node* temp = ans; 
        bool found = false; 
        string prefix = ""; 
        for(int i = 0; i < check.size(); i ++){
            int index = check[i] - 'a'; 
            if(temp->children[index] == NULL){
                found = false; 
                break; 
            }

            prefix += check[i]; 
            temp = temp -> children[index]; 

            if(temp -> isTerminal){
                found = true; 
                break; 
            }
        }

        if(found == true){
            ans1 += prefix; 
        }
        else{
            ans1 += check; 
        }
    }
};

class Solution {
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        // first store the words in vector string 
//         vector<string>strings; 
        
//         for(int i = 0; i < sentence.size(); i ++){
//             if(sentence[i] == ' '){
//                 continue; 
//             }
//             else{
//                 int j = i; 
//                 while(j < sentence.size() && sentence[j] != ' '){
//                     j ++; 
//                 }
                
//                 int len = j - i; 
//                 string k = sentence.substr(i,len);
//                 strings.push_back(k); 
//                 i = j; 
//             }
//         }
        
//         // now go through each string and jisse match hora use replace karo 
//         for(int i = 0; i < strings.size(); i ++){
//             for(string x : dictionary){
//                 if(strings[i].substr(0,x.size()) == x ){
//                     strings[i] = x; 
//                 }
//             }
//         }
        
//         // now concatenate them 
//         string ans = ""; 
//         int i = 0; 
//         for(string j : strings){
//             ans = ans + j; 
            
//             if (i != strings.size() - 1) {
//                 ans += " ";
//             }
//             i ++; 
//         }
        
//         return ans; 
        
        // approach 2: using set
        // unordered_set<string> dict;
        // bool skip = false; 
        // string res = ""; 
        // string curr = ""; 
        // for(auto x : dictionary){
        //     dict.insert(x); 
        // }
        
        // for(int i = 0; i <= sentence.size(); i ++){
        //     if(sentence[i] == ' ' or i == sentence.length()){
        //         res += curr; 
        //         if(i != sentence.size()){
        //             res += " "; 
        //         }
                
        //         skip = false;
        //         curr = ""; 
        //     }        
        //     else if(!skip){
        //         curr += sentence[i]; 
        //         if(dict.find(curr) != dict.end()){
        //             skip = true; 
        //         }
        //     }
        // }
        
        // return res; 

        // approach 3: using trie 
        // Trie* t = new Trie('\0'); 
        // for(int i = 0; i < dictionary.size(); i ++){
        //     t->insert(dictionary[i]); 
        // }

        // istringstream iss(sentence); 
        // string word; 
        // string ans; 
        // while(iss >> word){
        //     t->createString(word,ans);
        //     ans += " ";  

        // }
        // if(ans.size() != 0){
        //     ans.pop_back(); 
        // }

        // return ans; 
    
        unordered_set<string> st; 
        for(auto it : dictionary){
            st.insert(it); 
        }
        string curr = ""; 
        string answer = ""; 
        bool skip = false;
        for(int i = 0 ; i <= sentence.size(); i ++){
            if(sentence[i] == ' ' or i == sentence.size()){
                // means currente is complete 
                answer += curr; 
                if(i != sentence.size()){
                    answer += " "; 
                }

                skip = false; 
                curr = "";  
            }
            else if(!skip){
                // means i will not skip word here i will make check on whether the current word is valid or not 
                curr += sentence[i]; 
                if(st.find(curr) != st.end()){
                    skip = true; 
                }
            }
        }
        return answer; 
    }
};