//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template in C++

class Solution {
  public:
    // Function to return the count of number of elements in union of two arrays.
    int doUnion(vector<int> arr1, vector<int> arr2) {
        // code here
        
        // set<int> st;
        // int n = arr1.size(); 
        // int m = arr2.size(); 
        // for(int i=0 ; i<n ; i++){
        //     st.insert(arr1[i]);
        // }
        // for(int i=0 ; i<m ; i++){
        //     st.insert(arr2[i]);
        // }
        // return st.size();
        
        
        vector<int> answer; 
        sort(arr1.begin(),arr1.end()); 
        sort(arr2.begin(),arr2.end()); 
        int start1 = 0,end1 = arr1.size(),start2 = 0,end2 = arr2.size(); 

        while(start1 < end1 and start2 < end2 ){
            if(arr1[start1] == arr2[start2]){
                if(answer.empty() || answer[answer.size()-1] != arr1[start1]){
                    answer.push_back(arr1[start1]); 
                }
                
                start1 ++; 
                start2 ++; 
            }
            else if(arr1[start1] < arr2[start2]){
                if(answer.empty() || answer[answer.size()-1] != arr1[start1]){
                    answer.push_back(arr1[start1]); 
                }
                
                start1 ++; 
            }
            else {
                if(answer.empty() || answer[answer.size()-1] != arr2[start2]){
                    answer.push_back(arr2[start2]); 
                }
                start2 ++; 
            }
        }
        
        while(start1 < end1){
            if(answer.empty() || answer[answer.size()-1] != arr1[start1]){
                    answer.push_back(arr1[start1]);
            }
            start1 ++; 
        }
        
        while(start2 < end2){
            if(answer.empty() || answer[answer.size()-1] != arr2[start2]){
                    answer.push_back(arr2[start2]); 
            }
            start2 ++; 
        }
        
        
        return answer.size(); 
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore(); // Ignore the newline character after reading t

    while (t--) {
        vector<int> a;
        vector<int> b;

        string input;
        // For a
        getline(cin, input); // Read the entire line for the array elements
        stringstream ss(input);
        int number;
        while (ss >> number) {
            a.push_back(number);
        }

        // For b
        getline(cin, input); // Read the entire line for the array elements
        stringstream ss2(input);
        while (ss2 >> number) {
            b.push_back(number);
        }

        Solution ob;
        cout << ob.doUnion(a, b) << endl;
    }

    return 0;
}
// } Driver Code Ends