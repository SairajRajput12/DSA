class Solution {
public:
    void swap(vector<int> &arr,int &m,int i)
    {	
        int temp = arr[i]; 
        arr[i] = m; 
        m = temp; 
    }


    void rotate(vector<int>& arr, int k) {
        // int n = nums.size();
        // k = k % n;  // In case k is greater than the size of the array

        // // Reverse the whole array
        // reverse(nums.begin(), nums.end());

        // // Reverse the first k elements
        // reverse(nums.begin(), nums.begin() + k);

        // // Reverse the remaining elements
        // reverse(nums.begin() + k, nums.end());

        // 7 6 5 4 3 2 1 
        // reverse(nums.begin(),nums.end()); 
        // // 5 6 7 4 3 2 1 
        // reverse(nums.begin(),nums.begin()+k); 
        // // 5 6 7 1 2 3 4 
        // reverse(nums.begin()+k,nums.end());

        // brute force approach
        // k = k % arr.size(); 
        // if(k == 0)
        // {
        //     return; 
        // }

        // vector<int> rotated; 
        // for(int i = arr.size() - k; i < arr.size(); i ++)
        // {
        //     rotated.push_back(arr[i]); 
        // }

        // for(int i = 0; i < arr.size() - k ; i ++)
        // {
        //     rotated.push_back(arr[i]); 
        // }
        // arr = rotated; 

        // approach 3: using another
        // k = k %arr.size(); 
        // reverse(arr.begin(),arr.end()); 
        // reverse(arr.begin(),arr.begin()+k); 
        // reverse(arr.begin()+k,arr.end()); 
        

        // approach 4: using another
        int count = 0; 
        k = k%arr.size(); 

        for(int i = arr.size()-1; count < k;){
            arr.emplace(arr.begin(),arr[i]);
            arr.pop_back();
            count++;
        }
    }
};