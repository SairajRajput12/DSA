class Solution {
public:
int n; 
int answer; 
int cnt; 
    int longestConsecutive(vector<int>& nums) {
        // algorithm: 
        // n = nums.size();
        // if(n == 0){
        //     return 0; 
        // }
        // sort(nums.begin(),nums.end()); 
        // cnt = 1; 
        // answer = 1; 
        // for(int i = 1; i < n; i ++){
        //     int diff = nums[i] - nums[i-1]; 
        //     if(diff == 1){
        //         cnt ++; 
        //     }
        //     else if(diff == 0){
        //         continue; 
        //     }
        //     else{
        //         cnt = 1; 
        //     }

        //     answer = max(cnt,answer);
        // }
        // return answer; 

        // approach 2: using priority queue
        // int min; 
        // int count = 1; 
        // int max_count = 0; 

        // priority_queue<int,vector<int>, greater<int>> heap(nums.begin(),nums.end()); 

        // for(int i = 0; i < nums.size(); i ++){
        //     min = heap.top(); 
        //     heap.pop(); 

        //     if(min + 1 == heap.top()){
        //         count ++; 
        //     }
        //     else if(min != heap.top()){
        //         count = 1;
        //     }
        //     max_count = max(count,max_count); 
        // } 
        // return max_count;

        // approach 3: using hashtable 
        // value bool 
        // 100 true 
        // 4   true 
        // 200 true 
        // 1   true 
        // 3   true 
        // 2   true

        // 100 - 1 is not present in the hashmap 
        // 4 - 1 is present in the hashmap 
        // 200 - 1 is not present in the hashmap 
        // 1 - 1 is not present in the hashmap 
        // 3 - 1 is present in the hashmap 
        // 2 - 1 is present in the hashmap 

        // 100 false 
        // 4 true 
        // 200 false 
        // 1 false 
        // 3 true 
        // 2 true 

        // just checking only true value will give error means more than longest sequence will not encountered 
        // if(nums.size)
        // unordered_map<int,bool> mp; 
        // int answer = 1; 
        // if(nums.size() == 0){
        //     return 0; 
        // }
        // for(int i = 0; i < nums.size(); i ++){
        //     mp[nums[i]] = true; 
        // }
        // for(int i = 0; i < nums.size(); i ++){
        //     if(mp.count(nums[i] + 1) == 0){
        //         mp[nums[i]] = false; 
        //     }
        // }

        // for(int i = 0; i < nums.size(); i ++){
        //     int element = nums[i]; 
        //     int count = 0;
        //     if(mp[nums[i]] == true){
        //         int j = 0, count = 0; 
        //         while(mp.count(nums[i] + j) > 0){
        //             j ++; 
        //             count ++; 
        //         }

        //         if(count > answer){
        //             answer = count; 
        //         }
        //     }
        // }
        // return answer;
    }
};