import java.lang.*; 
class Solution {
  
    public int maximumGroups(int[] grades) {
    //Approach 1:    using formula : of TC: O(1)   
    // int n = grades.length; 
    // int ans = (int)((Math.floor(Math.sqrt(1+8*n)) - 1)/2); 
    // return ans;          


    // Appraoch 2: O(n) 
    // int n = grades.length; 
    // int i = 1,cnt = 0; 
    // int sum = 0; 
    // while(sum < n){
    //     sum += i; 
    //     if(sum > n){
    //         break;
    //     }
    //     cnt ++; 
    //     i ++; 
    // }

    // return cnt; 

    // Approach 3: Using Binary Search: O(log(n))
    long start = 0, n = grades.length, end = grades.length; 
    int maxGrp = 0; 
    while(start <= end){
        long  mid = start + (end - start)/2; 
        long curr = mid*(mid+1)/2; 
        if(curr <= n){
                maxGrp = (int)mid; 
                start = mid + 1;
        }

        else{
            end = mid - 1;
        }
    }

    return maxGrp; 
    
    }
}
