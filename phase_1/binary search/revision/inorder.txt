/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(vector<int>& ans,TreeNode* temp)
    {
        if(temp == NULL)
        {
            return; 
        }

        solve(ans,temp -> left); 
        ans.push_back(temp -> val); 
        solve(ans,temp -> right); 
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        // lecture 62: love babbar ki appraoch 
        // inorder : LNR  
        // preorder: NLR 
        // postorder: LRN
        // recursive approach: 
        // vector<int> ans; 
        // solve(ans,root); 
        // return ans; 

        // approach 2: iterative appraoch 
        // stack<TreeNode*> st; 
        // vector<int> ans; 
        // while(root != NULL || !st.empty())
        // {
        //     if(root != NULL)
        //     {
        //         st.push(root); 
        //         root = root -> left; 
        //     }
        //     else{
        //         root = st.top(); 
        //         st.pop(); 
        //         ans.push_back(root -> val); 
        //         root = root -> right; 
        //     }
        // }
        // return ans;

        // approach 3: using morris traversal 
        // TreeNode* currNode = root; 
        // vector<int> nodes; 
        // while(currNode != NULL){
        //     if(currNode -> left != NULL){
        //         // if it have the current child then find it's predecessor 
        //         TreeNode* predecessor = currNode -> left; 
        //         while(predecessor -> right != NULL && predecessor -> right != currNode){
        //             predecessor = predecessor -> right; 
        //         }

        //         if(predecessor -> right == NULL){
        //             // create linkage 
        //             predecessor -> right = currNode; 
        //             currNode = currNode -> left; 
        //         }
        //         else{
        //             // remove linkage 
        //             predecessor -> right = NULL; 
        //             nodes.push_back(currNode -> val); 
        //             currNode = currNode -> right; 
        //         }   
        //     }
        //     else{
        //         nodes.push_back(currNode -> val); 
        //         currNode = currNode -> right; 
        //     }
        // }

        // return nodes;

        // approach 4: using stacks
        stack<TreeNode*> st; 
        vector<int> ans;

        while(root != nullptr or !st.empty()){
            if(root != nullptr){
                st.push(root); 
                root = root -> left; 
            }
            else{
                root = st.top();
                ans.push_back(root->val); 
                st.pop(); 
                root = root -> right; 
            }
        }
        return ans; 
    }
};