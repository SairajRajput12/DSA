class Solution {
private: 
    int solve(int &start,int &end,vector<int> &nums,int target){
        if(start > end){
            return -1; 
        }

        int mid = start + (end - start)/2; 
        // hamara target konse range se belong karta hai ?? 
        if(nums[mid] == target){
            return mid; 
        }
        
        if(nums[start] <= nums[mid]){
            if(nums[start] <= target && target <= nums[mid]){
                end = mid - 1; 
            }
            else{
                start = mid + 1; 
            }
        }

        else{
            if(nums[mid] <= target && target <= nums[end]){
                start = mid + 1; 
            }
            else{
                end = mid - 1; 
            }
        }


        return solve(start,end,nums,target); 
    }
public:
    int search(vector<int>& nums, int target) {

    // approach 1: using binary search 

        // so mi pahile half madhe gelo tar mala 7 milal and 
        // int low = 0, high = nums.size()-1; 
        // // int mid = 0; 
        // int ans = -1; 
        // while(low <= high){
        //         int mid = low + (high-low)/2; 
        //         if(nums[mid] == target){
        //             return mid; 
        //         }

        //         if(nums[low] <= nums[mid]){
        //             if(nums[low] <= target && target <= nums[mid]){ // if target is in range then keep this range
        //                 high = mid - 1; 
        //             }

        //             else{
        //                 low = mid + 1; // if not present then choose the next range
        //             }
        //         }
        //         else{
        //             if(nums[mid] <= target && target <= nums[high]){
        //                 low = mid + 1; 
        //             }
        //             else{
        //                 high = mid - 1; 
        //             }
        //         }
        //     }

        // return -1;

        // int low = 0, end = nums.size()-1; 
        // return solve(low,end,nums,target);
        // sort(nums.begin(),nums.end());
        int start = 0,end = nums.size()-1; 
        while(start <= end)
        {
            int mid = start + (end-start)/2;
            if(nums[mid] == target){
                return mid; 
            }

            if(nums[start] <= nums[mid]){
                if(nums[start] <= target and target <= nums[mid]){
                    end = mid - 1; 
                }
                else{
                    start = mid + 1; 
                }
            }
            else{
                if(nums[mid] <= target and target <= nums[end]){
                    start = mid + 1; 
                }
                else{
                    end = mid - 1;
                }
            }
        }

        return -1; 
    }
};