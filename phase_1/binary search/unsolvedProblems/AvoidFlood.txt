1] the given solution is in java: 
import java.util.*; 

class Solution {
    public int[] avoidFlood(int[] rains) {
        // Approach 1:
        HashMap<Integer,Integer> lastRain = new HashMap(); 
        TreeSet <Integer> dry = new TreeSet<>(); 
        int n = rains.length; 
        int ans[] = new int[n]; 

        for(int i = 0; i <  n; i ++){
            int x = rains[i]; 
                if(x == 0){
                    dry.add(i); 
                    ans[i] = 1; // added random element
                }
                else{
                    Integer id = lastRain.get(x); 
                    if(id == null){
                        lastRain.put(x,i); 
                    }

                    else{
                        Integer dryThisDay = dry.higher(id);
                        if(dryThisDay == null){
                            return new int[0]; 
                        }
                        ans[dryThisDay] = x; 
                        dry.remove(dryThisDay); 
                        lastRain.put(x,i); 
                    }
                        ans[i] = -1; 
                }
        }

        return ans;

    }
}

2] Now  it's time for c++ solution: 

class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
          vector<int> ans(rains.size(),1);
        map<int,int> mp;
        set<int> ms;
        for(int i=0;i<rains.size();i++){
            if(rains[i] == 0){
                ms.insert(i);
            }else if(mp.count(rains[i])){
                int last = mp[rains[i]];
                auto lb = ms.lower_bound(last);
                if(lb == ms.end()) return {};
                ans[*lb] = rains[i];
                ans[i] = -1;
                ms.erase(lb);
            }else{
                ans[i] = -1;
            }
            mp[rains[i]] = i;
        }
        return ans;
    }
};