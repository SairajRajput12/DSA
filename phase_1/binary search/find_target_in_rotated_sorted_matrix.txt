// Ist Solution 

class Solution {
    public int search(int[] nums, int target) {
        int end = nums.length - 1; 
        int start = 0; 
        int mid = start + (end - start)/2; 
                while(start < end){
                    if(nums[mid] > nums[end]){
                        if(target > nums[mid] || target <= nums[end]){
                                start = mid + 1; 
                        }

                        else{
                                end = mid;  
                        }
                    }

                    else{
                        if(target > nums[mid] && target <= nums[end]){
                                start = mid + 1; 
                        }

                        else{
                                end = mid;  
                        }
                    }
                    mid = start + (end - start)/2; 
                }

        if(start == end && target != nums[start]){
            return -1; 
        }        

        return start; 
    }
    
    }
    
// II nd Solution 
class Solution {
    
    public int min_index(int nums[]){
        int start = 0; 
        int end = nums.length - 1; 
        int mid = start + (end - start)/2; 
                while(start < end)
                {
                    if(nums[mid] > nums[end]){
                        start = mid + 1; 
                    }
                    
                    else{
                        end = mid; 
                    }
                    mid = start + (end - start)/2; 
                }
        return start;        
    }
    
    public int search(int[] nums, int target) {
        // step 1: To find the index of that element which is smallest in the array 
        int minIdx = min_index(nums);
        // System.out.println("Min Index :" + minIdx);
        
        if(target == nums[minIdx]){
            return minIdx; 
        }
        //  setting the values for start and end of the search space.
        int n = nums.length; 
        int start = (target <= nums[n-1])? minIdx : 0; // if this condition is true then it will start with minIdx else the target element will be lie at left partition 
        int end = (target > nums[n-1]) ? minIdx : n-1; // if  this condition is true then it will return the minIdx else it will return n - 1. 
        int mid  = start + (end - start)/2; 
            while(start <= end)
            {
            //   System.out.println("mid :" + nums[mid]);
            //   System.out.println("Start :" + nums[start]); 
            //   System.out.println("End :" + nums[end]);
                    //  double num = (nums[mid] < nums[0]) == (target < nums[0]) ? nums[mid]: target < nums[0] ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;

                    if (nums[mid] < target)
                        start = mid + 1;
                    else if (nums[mid] > target)
                        end = mid-1;
                    else
                        return mid;
                mid = start + (end - start)/2; 
            }

        return -1;     
    }
}

