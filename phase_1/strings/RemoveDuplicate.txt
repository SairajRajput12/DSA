import java.util.*; 
class Solution {
    public String removeDuplicates(String str) {

        // approach 1: 
        /*
        int i = 0, n = s.length();
        char[] res = s.toCharArray();
        for (int j = 0; j < n; ++j, ++i) {
            res[i] = res[j];
            if (i > 0 && res[i - 1] == res[i]) // count = 2
                i -= 2;
        }
        return new String(res, 0, i);

        */ 

        // approach 2: But not applicable for all test cases. 

        
    //     char[] arr = str.toCharArray(); 
    //     StringBuilder newStr = new StringBuilder(); 
	// 	int length = str.length(); 
    //     for(int i = 0; i < length ; i ++){
    //         for (int j = (i+1); j < length; j++) {
    //             if(i < (length - 1) && arr[i] == arr[j]){
    //                 arr[j] = ' '; 
    //                 arr[i] = ' '; 
    //                 break; 
    //             }
    //         }    
    //     }   
    
    
    // for (int i = 0; i < length; i++) {
    //     if(arr[i] == ' '){
    //         continue; 
    //     }
        
    //     newStr.append(arr[i]);   
    // }

    // return newStr.reverse().toString(); 
        
    
    
    // approach 3: using string builder: 

    // StringBuilder sb = new StringBuilder();
    //     for (char c : str.toCharArray()) {
    //         int size = sb.length();
    //         if (size > 0 && sb.charAt(size - 1) == c) {
    //             sb.deleteCharAt(size - 1);
    //         } else {
    //             sb.append(c);
    //         }
    //     }
    //     return sb.toString();

       
    // approach 4: using stack 
    Stack <Character>  s = new Stack(); 
    for(int i = 0; i < str.length(); i ++){
        if(!s.isEmpty() && s.peek() == str.charAt(i)){
            s.pop(); 
        }

        else{
            s.push(str.charAt(i)); 
        }
    }

    StringBuilder s1 = new StringBuilder(); 
    while(!s.isEmpty()){
        s1.append(s.pop()); 
    }

    return s1.reverse().toString(); 
    }
}
