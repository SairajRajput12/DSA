// code 1: 
class Solution {
unordered_map<int,pair<int,int>> sq; 
    
    bool duplicateExist(int e, vector<int> &nums, int ind) {
        int cnt = 1;
        if (ind < (nums.size() - 1) and nums[ind] == nums[ind + 1]) {
            cnt++;
        }

        if (ind > 0 and nums[ind] == nums[ind - 1]) {
            cnt++;
        }

        cout << "duplicate exist" << endl;
        return (cnt > 1) ? true : false;
    }

    bool squareExist(long long e, vector<int> &nums, int ind) {
        int start = 0;
        int end = nums.size() - 1;
        while (start < end) {
            if (nums[start] * nums[start] < e) {
                start++;
            } else if (nums[end] * nums[end] > e) {
                end--;
            } else if (nums[start] * nums[start] == e or nums[end] * nums[end] == e) {
                return true;
            }
        }

        cout << "square exist for num = " << e << endl;

        return false;
    }
public:
    int maximumLength(vector<int>& nums) {
//         sort(nums.begin(),nums.end()); 
//         int ans = 1; 
        
        
//         for(int i = 0; i < nums.size(); i ++){
//             vector<int> temp; 
//             int x = 0; 
//             int e = nums[i]; 
//             if(nums[i] == 1){
//                 continue; 
//             }
//             // first find that it's duplicate exist or not if yes and it's square exist then add it in the temp array 
//             if(squareExist(e,nums) and duplicateExist(e,nums)){
                
//                 temp.push_back(e); 
//                 temp.push_back(e); 
//                 temp.push_back(e*e); 
//                 x ++; 
                
//                 // i pushed it in my array 
//                 int h = e*e; 
//                 while(squareExist(h,nums)){
//                     if(temp[temp.size()-1] == h){
//                         continue; 
//                     }
//                     temp.push_back(h); 
//                     h = h*h; 
//                 }
//             }
            
//             if(ans < temp.size()){
//                 ans = temp.size(); 
//             } 
//         }
        
//         return ans;

// approach 2: using extra space
//         if(nums.size() < 3){
//             return 1; 
//         }
        
//         for(int i = 0; i < nums.size(); i ++){
//             long long e = nums[i]; 
//             if(squareExist(nums[i],nums) and duplicateExist(nums[i],nums)){
//                 pair<int, int> p = make_pair(e, e * e);
//                 sq[nums[i]] = p;  
//             }

//         }
//         int ans = 1; 
        
//         for(int i = 0; i < nums.size(); i ++){
//             vector<long long> temp; 
//             long long e = nums[i]; 
//             temp.push_back(e);
//             auto it = sq.find(e);
//             while (it != sq.end()) {
//                 auto pair = *it; // Fetching the pair from the iterator
//                 temp.push_back(sq[e].first); // Push the first element of the pair
//                 temp.push_back(sq[e].second); // Push the second element of the pair
//                 e = e * e; 
//                 it = sq.find(e); 
//             }


//             if(ans < temp.size())
//             {
//                 ans = temp.size(); 
//             }
//         }
        
//         return ans;  
        
    // approach 3: without using extra space 
        // step 1: store the count of each element in the hashtable 
        unordered_map<int,int> freq; 
        int ans = 1; 
        int n = nums.size(); 
        for(int i : nums){
            freq[i] ++; 
        }

        // step 2: now go through each element
        for(int i = 0; i < n; i ++){
            long long num = nums[i]; 
            // store the temprorary count in cnt 
            int cnt = 0; 

            while(true){
            
                // if num is 1 then get max and if ans is even then decrement ans. 
                if(num == 1){
                    ans = max(freq[num],ans); 
                    if(ans%2 == 0){
                        ans --; 
                    }
                    break; 
                }

                // if freq count is greater than 1 then increment count by 2.                 
                else if(freq[num] >= 2){
                    cnt += 2; 
                }

                // if freq count is 1 then increment count by 1. 
                else if(freq[num] == 1){
                    cnt ++; 
                    break; 
                }

                // else break. 
                else{
                    break; 
                }

                // square num   
                num = num * num;

                // check if overflow has occured or not 
                // if yes then nikal jao 
                if(num > 1e9){ 
                    // prevent overflow 
                    break;   
                }
            }

            // if ans is odd then return kardo 
            if(cnt&1){
                ans = max(ans,cnt); 
            }
            else{
            // if ans is even then decrement cnt and get max between them 
                ans = max(ans,cnt-1); 
            }
        }
        
        // step 3: return ans 
        return ans; 
    }
};

// code 2: 
class Solution {
public:
    int countKeyChanges(string s) {
        string lowers = ""; 
        for(int i = 0; i < s.size(); i ++){
            if(s[i] >= 'A' and s[i] <= 'Z'){
                char id = s[i] + 32; 
                lowers = lowers + id; 
            }
            else{
                lowers += s[i]; 
            }
        }
        
        int ans = 0; 
        for(int i = 1; i < lowers.size(); i ++){
            if(lowers[i] != lowers[i-1]){
                ans ++; 
            }
        }
        
        return ans; 
    }
};
