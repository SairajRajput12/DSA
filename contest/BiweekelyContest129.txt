class Solution {
public:
    
    bool solve(vector<vector<char>>& grid,int row,int col,int cnt){
        
        
        return false; 
    }
    
    bool canMakeSquare(vector<vector<char>>& grid) {
        bool resp = false; 
        int cnt_b = 0; 
        
        for(int row = 0; row < grid.size(); row ++){
            for(int col = 0; col < grid[0].size(); col ++){
                
                // cout << row << " " << col << endl; 
                if(row == 0 and col == 0){
                    // check for right part 
                    // if(grid[row+1][col] == grid[row+1][col+1] and grid[row][col+1] == grid[row+1][col] and grid[row][col] == grid[row+1][col]){
                    //     return true; 
                    // }
                    
                    if(grid[row+1][col] == grid[row+1][col+1] and grid[row][col+1] == grid[row+1][col]){
                        return true; 
                    }
                    

                    
                }
                
                if(row != 0 and col == 0){
                    // check for lower and upper part 
                    if(row < (grid.size()-1) and grid[row+1][col] == grid[row+1][col+1] and grid[row][col+1] == grid[row+1][col+1]){
                        return true; 
                    }
                    
                    if(row > 0 and grid[row-1][col] == grid[row-1][col+1] and grid[row][col+1] == grid[row-1][col+1]){
                        return true; 
                    }
                }
                
                if(row == 0 and col != 0){
                    // check for left and right part 
                    if(col > 0 and grid[row][col-1] == grid[row+1][col-1] and grid[row][col-1] == grid[row+1][col]){
                        cout << "left" << endl; 
                        return true; 
                    }
                    
                    // left part 
                    if(col < (grid[0].size()-1) and grid[row][col+1] == grid[row+1][col+1] and grid[row][col+1] == grid[row+1][col]){
                        cout << "right"<<endl;
                        return true; 
                    }
                    
                    
                }
                
                if(row != 0 and col != 0){
                    // check in all directions 
                    // upper left part 
                     
                    if(row > 0 and col > 0 and grid[row-1][col] == grid[row-1][col-1] and grid[row][col-1] == grid[row-1][col-1]){
                        return true; 
                    }
                    
                    // upper right part 
                    if(row > 0 and col < grid[0].size()-1 and grid[row-1][col] == grid[row-1][col+1] and grid[row-1][col] == grid[row][col+1]){
                        return true; 
                    }
                    
                    // bottom left 
                    if(row < grid.size()-1 and col > 0 and grid[row][col-1] == grid[row+1][col-1] and grid[row][col-1] == grid[row+1][col]){
                        return true; 
                    }
                    
                    // bottom right 
                    if(row < grid.size()-1 and col < grid[0].size()-1 and grid[row+1][col] == grid[row+1][col+1] and grid[row][col+1] == grid[row+1][col+1]){
                        return true; 
                    }
                    
                    // middle 
                   
                }
                if(grid[row][col] == 'B'){
                    cnt_b ++; 
                }
                
//                 if(row != 0 and col != 0){
                    
//                 }
                
            }
        }
        
        if(cnt_b == 9){
            return true; 
        }
        
        return false; 
    }
};

// right traingles 

class Solution {
public:
    long long numberOfRightTriangles(vector<vector<int>>& grid) {
        long long cnt_b = 0; 
        
        int n = grid.size(); 
        int m = grid[0].size(); 
        
        vector<int> row(n,0); 
        vector<int> col(m,0); 
        
        for(int i = 0; i < grid.size(); i ++){
            for(int j = 0; j < grid[0].size(); j ++){
                row[i] += grid[i][j]; 
                col[j] += grid[i][j]; 
            }
        }
        
        for(int i = 0; i < grid.size(); i ++){
            for(int j = 0; j < grid[0].size(); j ++){
                if(grid[i][j] == 1){
                    cnt_b += (row[i]-1)*(col[j]-1); 
                }
            }
        }
        
        
        
        return cnt_b; 
    }
};
