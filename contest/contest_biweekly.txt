class Solution {
public:
    int incremovableSubarrayCount(vector<int>& nums) {
        int ans=0,n=nums.size();
        for(int i=0;i<n;++i){
            for(int j=i;j<n;++j){
                int flag=1;
                for(int k=1;k<n;++k){
                    if(k>=i and k<=j)continue;
                    // if(k==j+1)continue;
                    if(k==j+1){
                        if(i>0 and nums[k]<=nums[i-1]){
                            flag=0;
                            break;
                        }
                        continue;
                    }
                    if(nums[k]<=nums[k-1]){
                        flag=0;
                        break;
                    }
                
                
                }
                
                if(flag==1)ans++;
            }
        }
        return ans;
    }
};


class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
        long long best=-1;
        int n=nums.size();
        sort(begin(nums),end(nums));
        long long cur=1LL*nums[0]+nums[1];
        
        for(int i=2;i<n;++i){
            if(cur>nums[i]){
                best=1LL*cur+nums[i];
            }
            cur+=nums[i];
        }
        
        return best;
    }
};
