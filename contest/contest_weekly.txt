#define mod 1000000007
class Solution {
    
private: 
    unordered_map<int,bool> mp;   
    long long ans; 

    // Function to store all possible fence lengths in the map
    void store(vector<int> hFences, unordered_map<int,bool> &mp) {
        for(int i = 0; i < hFences.size(); i++) {
            for(int j = i + 1; j < hFences.size(); j++) {
                int length = hFences[j] - hFences[i]; 
                mp[length] = true; 
            }
        }
    }
    
    // Function to find the common elements between unordered map and possible widths
    void solve(vector<int> hFences, unordered_map<int,bool> &mp, long long &ans) {
        for(int i = 0; i < hFences.size(); i++) {
            for(int j = i + 1; j < hFences.size(); j++) {
                int length = hFences[j] - hFences[i]; 
                if(mp.find(length) != mp.end()) {
                    ans = max(ans, 1ll * length);  // we are just storing the common length 
                }
            }
        }
    }
    
    void steps(vector<int> &vFences,vector<int> &hFences,int m,int n){
        // Step 2: Include the 1 and fence number into the array for calculating the possible fence height and width, respectively 
        hFences.push_back(1); 
        hFences.push_back(m); 
        
        vFences.push_back(1); 
        vFences.push_back(n); 
        
        // Step 3: Sort both sets of fences 
        sort(hFences.begin(), hFences.end());
        sort(vFences.begin(), vFences.end()); 
    }
    
public:
    // Main function to maximize square area
    int maximizeSquareArea(int m, int n, vector<int>& hFences, vector<int>& vFences) {
        // Step 1: Check if the given figure is already a square; if yes, remove all fences and return the whole area as the answer 
        if(m == n) {
            return ((m - 1) * (n - 1))%mod; 
        }
        
        steps(vFences,hFences,m,n); 
        
        // Step 4: Store all possible lengths in the map 
        store(hFences, mp);
        
        // Step 5: Go for vertical fences
        ans = -1; 
        solve(vFences, mp, ans);
            
        return (ans == -1) ? ans : (ans * ans) % mod; // to avoid integer overflow we are calculating area here by taking the mod
    }
};


class Solution {
private: 
    vector<int> ans; 
    
//     int findMin(vector<int> &nums){
//         int min_element = INT_MAX; 
//         for(int i = 0; i < nums.size(); i ++){
//             if(min_element > nums[i]){
//                 min_element = nums[i]; 
//             }
//         }
//         return min_element;
//     }
    
    void solve(vector<int> nums,vector<int> &ans){
        while(nums.size() > 0){
            int min1 = nums[nums.size()-1];  // we got min1  
            nums.pop_back(); 
            int min2 = nums[nums.size()-1];  // we got min2 
            ans.push_back(min2); 
            ans.push_back(min1); 
            
            nums.pop_back();
        }
    }
public:
    vector<int> numberGame(vector<int>& nums) {
        sort(nums.begin(),nums.end()); 
        reverse(nums.begin(),nums.end()); 
        solve(nums,ans); 
        return ans; 
    }
};
