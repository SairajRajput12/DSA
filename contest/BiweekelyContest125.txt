class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end()); 
        int cnt = 0; 
        for(int i = 0; i < nums.size(); i ++){
            if(nums[i] < k){
                cnt ++; 
            }
            else{
                break; 
            }
        }
        
        return cnt; 
    }   
};


class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> pq;
        for(int i = 0; i < nums.size(); i ++){
            long long x = nums[i]; 
            pq.push(x); 
        }

        int ans = 0;
        while (!pq.empty()) {
            if (pq.top() >= k) {
                break;
            }
            
            long long min1 = pq.top();
            pq.pop();
            if (pq.empty()) {
                break;
            }
            long long min2 = pq.top();
            pq.pop();
            
            cout << min1 << " " << min2 << endl; 
            long long val = 2LL * min1 + min2;
            cout << val << endl; 
            pq.push(val);
            ans++;
        }
        return ans;
    }
};