/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(vector<int>& ans,TreeNode* temp)
    {
        if(temp == NULL)
        {
            return; 
        }

        ans.push_back(temp -> val); 
        solve(ans,temp -> left); 
        solve(ans,temp -> right); 
    }
public:
    vector<int> preorderTraversal(TreeNode* root) {
        // approach 1: using recursion 
        // vector<int> ans; 
        // solve(ans,root); 
        // return ans; 


        // approach 2: using iterative appraoch  
        // using stack 
        stack<TreeNode*> st; 
        st.push(root); 
        vector<int> ans; 
        while(!st.empty())
        {
            root = st.top(); 
            st.pop(); 
            if(root != NULL)
            {
                ans.push_back(root -> val); 
                
                if(root -> right != NULL){
                    st.push(root -> right); 
                }

                if(root -> left != NULL)
                {
                    st.push(root -> left); 
                }

            }
        }
        return ans; 
    }
};
