//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left
child and a pointer to right child */
class Node
{
public:
    int data;
    Node *left, *right;
    Node(int data)
    {
        this->data = data;
        this->left = this->right = NULL;
    }
};

/* This function is to print the inorder of the tree  */
void inorder(Node *root)
{
    if (root == NULL)
        return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}



// } Driver Code Ends
//User function Template for C++

/*
class Node
{
public:
    int data;
    Node* left, *right;
    Node(int data)
    {
        this->data = data;
        this->left = this->right = NULL;
    }
};
*/


class Solution{
private: 
int i = 0; 
map<int,int> mapping; 
    
    void mapOpenToClose(string str){
        stack<int> s;
        for(int i = 0; i < str.length(); i ++){
            if(str[i] == '('){
                s.push(i); 
            }
            else if(str[i] == ')'){
                mapping[s.top()] = i; 
                s.pop(); 
            }
        }
    }

    void solve(Node* root,string str){
        if(i < str.size() and isdigit(str[i])){
            int sum = 0; 
            
            // i did this for 2 digit numbers
            while(i < str.size() and isdigit(str[i])){
                sum = sum * 10; 
                sum = sum + (str[i]-'0'); 
                i ++; 
            }
            root->data = sum; 
        }
        
        if(i < str.size() and str[i] == '('){
            if(str[i+1] == ')'){
                // matlab empty node hai then marked it as null 
                root -> left = NULL; 
                i = i + 2; 
            }
            else{
                root -> left = new Node(0); 
                i ++; 
                solve(root->left,str); 
            }
        }
        
        
        if(i < str.size() and str[i] == '('){
            if(str[i+1] == ')'){
                // matlab empty node hai then marked it as null 
                root -> right = NULL; 
                i = i + 2; 
            }
            else{
                root -> right = new Node(0); 
                i ++; 
                solve(root->right,str); 
            }
        }
        
        
        
        if(i >= str.size() or str[i] == ')'){
            i ++; 
            return; 
        }
    }
    
    Node* treeFromString(string str,int si,int end){
        if(si > end){
            return NULL; 
        }
        
        int num = 0; 
        while(si < str.size() and isdigit(str[si])){
            num = num * 10 + (str[si] - '0'); 
            si ++; 
        }
        si --; 
        
        // new root 
        Node* root = new Node(num); 
        int index = -1; 
        // if next char is '(' find the index complement of it's ')' 
        if(si + 1 <= end and str[si + 1] == '('){
            index = mapping[si + 1]; 
        }
        
        if(index != -1){
            root -> left = treeFromString(str,si+2,index-1);  
            root -> right = treeFromString(str,index+2,end-1); 
        }
        
        return root; 
    }
    
public:
    // function to construct tree from string
    Node *treeFromString(string str){
        // code here 
        
    // approach 1: using recursion
        // if(str == ""){
        //     return NULL; 
        // }
        
        // Node* root = new Node(0); 
        // solve(root,str); 
        // return root; 
        
    // approach 2: using stack 
        mapOpenToClose(str); 
        return treeFromString(str,0,str.size()-1); 
    }
};














//{ Driver Code Starts.

// Driver Code
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        string str;
        cin >> str;
        Solution obj;
        Node *root = obj.treeFromString(str);
        inorder(root);
        cout << "\n";
    }
    return 0;
}

// } Driver Code Ends
