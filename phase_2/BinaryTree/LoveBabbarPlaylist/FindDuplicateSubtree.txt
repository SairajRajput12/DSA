/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private: 
unordered_map<string,vector<TreeNode*>> mp; 
    string simplify(TreeNode* root){
        if(root == NULL){
            return ""; 
        }

        string s = "(" + simplify(root -> left) + to_string(root->val) + simplify(root->right) + ")"; 
        mp[s].push_back(root); 
        return s; 
    }



public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
    // approach : i proposed (i used the node for storing inside the map)
        // vector<TreeNode* > inorderTraversal;  
        // unordered_map<TreeNode* ,bool> mp; 
        // solve(root,inorderTraversal,mp);
        // return inorderTraversal;  

    // approach 2: using string and vector noddes rerpresenatation 
        // inorder : 4 2 1 4 2 3 4  
        vector<TreeNode*> ans; 
        simplify(root); 
        for(auto it: mp){
            if(it.second.size() > 1){
                ans.push_back(it.second[0]); 
            }
        }
        return ans; 
    }
};


