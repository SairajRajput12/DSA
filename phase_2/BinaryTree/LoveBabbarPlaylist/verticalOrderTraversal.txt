/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
map<int,vector<pair<int,int>>> mp; 
vector<vector<int>> ans;
void solve(TreeNode* root,int lvl,int hlvl){
    if(root == NULL){
        return; 
    }

    mp[lvl].push_back({hlvl,root -> val}); 
    solve(root -> right,lvl + 1, hlvl + 1); 
    solve(root -> left,lvl - 1, hlvl + 1); 
}
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        solve(root,0,0); 
        for(auto it: mp){
            vector<int> temp; 
            vector<pair<int,int>> v2 = it.second; 
            map<int,vector<int>> mp2; 
            for(auto i : v2){
                mp2[i.first].push_back(i.second); 
            }

            for(auto x : mp2){
                vector<int> v3 = x.second;
                sort(v3.begin(),v3.end());
                temp.insert(temp.end(),v3.begin(),v3.end());
            }

            ans.push_back(temp); 
        }
        return ans; 
    }
};







// 1st approach:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// map<int, map< int , vector<int>>> mp;
// // maine yaha map kyon use kiya ?? 
// // beacuse i want to store the multiple levels node which had the same horizontal nodes. 

// queue<pair<TreeNode*, pair<int, int>>> q;
// vector<vector<int>> ans; 
// public:
//     vector<vector<int>> verticalTraversal(TreeNode* root) {
//         if(root == NULL) { 
//             return ans; 
//         }

//         q.push({root,{0,0}}); 
//         while(!q.empty()){
//             auto temp = q.front(); 
//             q.pop(); 
//             int level = temp.second.second; 
//             int hd = temp.second.first; 

//             mp[hd][level].push_back(temp.first->val); 
//             if(temp.first -> left != NULL){
//                 q.push({temp.first -> left,{hd - 1,level + 1}}); 
//             }

//             if(temp.first -> right != NULL){
//                 q.push({temp.first -> right,{hd + 1,level + 1}}); 
//             }
//         }

//         for(auto m : mp){
//             vector<int> x; 
//             for(auto k : m.second){
//                 sort(k.second.begin(),k.second.end()); 
//                 for(auto j : k.second){
//                     x.push_back(j); 
//                 }
//             }
//             ans.push_back(x); 
//         }
//         return ans; 
//     }
// };



// ham is question ko maping se solve karenge. 
        // jo diagrame mein diya hai to wo horizontal distance ke basis mein evaluate kar rahe hai. 
    
        //  question solve karne se pehle mera pehla question hoga as below ??  
        //  kya sare nodes ka horizontal distance same hoga ?? 
        //  nahi kuch nodes ka same bhi ho skta hai. 
        
        // batao kaise ?? 
        // agar mein example 1 mein 9 ko child node deta hu to wo same horizontal distance show karega. 
        
        // konse data structure ka use kar skta hu mein yaha ?? 
        // vector/ array index based data structure hai and they can store it in sorted order but biggest flow is that negative indexing. jo solution hoga wo understandable nahi hoga. 
        // kya mein yaha map use kar skta hu ?? 
        // ha kar skta hu. 

        // kaise use kar skta hu ? 
        // mein map mein horizontal distance,level and nodes jinka hd same hoga unko array mein store karunga. 

        // achi baat hai. achi baat hai to fir tum map mein element kaise fill karoge mein ye janna chahunga. 
        // 1. mein level wise traversal ka use karunga. mein queue mein element insert karunga 
        // 2. front wale ko pop karunga then map mein push karunga level and hd of that node nikal ne ke baad. 
        // 3. left and right child ko push karunga with hd of current / parent node - 1 and +1 respectively. 
        // 4. baad mein mein maps ke elements ko array mein push karunga 
        // 5. then i will return the answer array.











