/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(vector<int>& ans,TreeNode* temp)
    {
        if(temp == NULL)
        {
            return; 
        }

        solve(ans,temp -> left); 
        ans.push_back(temp -> val); 
        solve(ans,temp -> right); 
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        // lecture 62: love babbar ki appraoch 
        // inorder : LNR  
        // preorder: NLR 
        // postorder: LRN
        // recursive approach: 
        // vector<int> ans; 
        // solve(ans,root); 
        // return ans; 

        // approach 2: iterative appraoch 
        stack<TreeNode*> st; 
        vector<int> ans; 
        while(root != NULL || !st.empty())
        {
            if(root != NULL)
            {
                st.push(root); 
                root = root -> left; 
            }
            else{
                root = st.top(); 
                st.pop(); 
                ans.push_back(root -> val); 
                root = root -> right; 
            }
        }
        return ans; 
    }
};
