/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    // void mirror(TreeNode* root)
    // {
    //      if(root==NULL)
    //         return ;
    //     else
    //     {
    //         mirror(root->left);
    //         mirror(root->right);
    //         TreeNode* temp;
    //         temp=root->left;
    //         root->left=root->right;
    //         root->right=temp;
    //     }
    // }

    void mirrorIt(TreeNode* root)
    {
        if(root == NULL)
        {
            return; 
        }

        mirrorIt(root -> left); 
        mirrorIt(root -> right); 
        TreeNode* temp; 
        temp = root -> left; 
        root -> left = root -> right; 
        root -> right = temp;         
    }
public:
    TreeNode* invertTree(TreeNode* root) {
    // recursive approach: 1
        // mirrorIt(root); 
        // return root;  
    // approach 2: using simple traversing 
        queue<TreeNode*> q;
        q.push(root);

        if(root == NULL){
            return root;
        }

        while(!q.empty()){
            int size = q.size();
            for (int i = 0; i < size; i++)
            {
                TreeNode* node = q.front();
                q.pop();
                TreeNode* temp = node -> left; 
                node -> left = node -> right; 
                node -> right = temp; 

                // conditions to add the nodes.
                if(node->left != NULL) {
                    q.push(node->left);
                    // node->right = node->left;
                }
                if(node->right != NULL) {
                    q.push(node->right);
                    // node->left = node->right;
                }
                
            }
            // Do something with the 'level' vector if needed.
        }

            // 'node' now points to the last node in the last level of the tree.
            return root;
    }
    
};
