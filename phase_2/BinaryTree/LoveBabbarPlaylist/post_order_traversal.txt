/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(TreeNode* root,vector<int> &ans)
    {
        if(root == NULL)
        {
            return; 
        }
        solve(root -> left,ans); 
        solve(root -> right,ans); 
        ans.push_back(root -> val); 
    }
public:
    vector<int> postorderTraversal(TreeNode* root) {
    // approach 1: using recursion 
        // vector<int> ans; 
        // solve(root,ans); 
        // return ans; 

    // appraoch 2: using stack 

    // vector<int> ans;  
    // stack<TreeNode*> st1; 
    // stack<TreeNode*> st2; 
    
    // if(root == NULL){
    //     return ans; 
    // }
    
    // st1.push(root); 
    // while(!st1.empty()){
    //     root = st1.top(); 
    //     st1.pop();
    //     st2.push(root); 
    //     if(root -> left != NULL){
    //         st1.push(root -> left); 
    //     }
    //     if(root -> right != NULL){
    //         st1.push(root -> right); 
    //     }

    // }

    // while(!st2.empty()){
    //     TreeNode* rev = st2.top(); 
    //     st2.pop(); 
    //     ans.push_back(rev -> val); 
    // }
    //     return ans;

    // approach 3: using record tracking data structure 
        std::vector<int> ans;
        std::stack<TreeNode*> st;
        std::unordered_map<TreeNode*, int> mp;

        while (root != NULL || !st.empty()) {
            if (root != NULL) {
                st.push(root);
                root = root->left;
                mp[st.top()] = 0;
            } else {
                if (mp[st.top()] == 0) {
                    // means I have not explored that node
                    mp[st.top()] = 1;
                    root = st.top()->right;
                } else {
                    // I have already explored that node. now I want to add that node to the vector
                    root = st.top();
                    st.pop();
                    ans.push_back(root->val);
                    root = NULL; // Important: set root to nullptr to avoid the loop
                }
            }
        }
        return ans;
    }
};
