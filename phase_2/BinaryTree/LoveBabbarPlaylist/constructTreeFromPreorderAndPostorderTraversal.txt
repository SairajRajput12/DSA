/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,Integer> map = new HashMap<>(); 
    int index = 0; 
    int[] pre_arr; 
    int[] post_arr; 

    private TreeNode solve(int preIdx){
        if(index >= pre_arr.length) return null; 
        int currVal = pre_arr[index]; 
        int curIdx = map.get(currVal); 
        if(preIdx < curIdx) return null; // means it does not have the child 
        index ++; 
        TreeNode root = new TreeNode(currVal); 
        root.left = solve(curIdx); 
        root.right = solve(curIdx);  
        return root;
    }

    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        // start from the starting index of the preorder travesal and build the root 
        // when the index of the element is less that it's parent node in post order array then we can confirm it as the child of that element 
        pre_arr = preorder; 
        post_arr = postorder;
        for(int i = 0; i < postorder.length; i ++){
            map.put(postorder[i],i); 
        }

        return solve(preorder.length);
    }
}
