#include <bits/stdc++.h>

/************************************************************
   Following is the Binary Tree node structure
   
   template <typename T>
   class TreeNode {
   public:
       T data;
       TreeNode<T> *left;
       TreeNode<T> *right;

       TreeNode(T data) {
           this->data = data;
           left = NULL;
           right = NULL;
       }

       ~TreeNode() {
           if (left)
               delete left;
           if (right)
               delete right;
       }
   };
************************************************************/

void solve(TreeNode<int>* &head, TreeNode<int>* root,TreeNode<int>* headKaHead) {
    if (root == NULL) {
        return;
    }

    solve(head, root->left,headKaHead);

    if (headKaHead == NULL) {
        headKaHead = root; 
        head = root; 
    } else {
        head->right = root;
        root->left = NULL;  // Fixed: set the left child of the root to NULL
        head = root;
    }

    solve(head, root->right,headKaHead);
}

void inorder(TreeNode<int>* &root, vector<int> &vec) {
    if (root == NULL) {
        return;
    }

    inorder(root->left,vec);
    vec.push_back(root->data); 
    inorder(root->right,vec);
}


TreeNode<int>* flatten(TreeNode<int>* root) {

    // algorithm 1: 
    // 1. obtain the inorder of the root node 
    // 2. make the left pointer null and put the right pointer to the next element 
    // 3. last element ka left and right dono null kardo 
    vector<int> vec; 
    inorder(root,vec); 
    TreeNode<int>* headKaHead = new TreeNode<int>(vec[0]);  
    TreeNode<int>* head = headKaHead;
    for(int i = 1; i < vec.size(); i ++){
        TreeNode<int>* temp = new TreeNode<int>(vec[i]); 
        head -> right = temp; 
        head -> left = NULL; 
        head = head -> right; 
    }
    head -> left = NULL; 
    head -> right = NULL; 
    return headKaHead; 




    // algorithm 2: 
    // if (root == NULL) {
    //     return NULL;
    // }

    // TreeNode<int>* head = NULL;
    // TreeNode<int>* headKaHead = NULL; 
    // solve(head, root,headKaHead);

    // return headKaHead;
}
