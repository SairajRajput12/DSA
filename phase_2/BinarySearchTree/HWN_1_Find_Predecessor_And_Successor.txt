pair<int, int> predecessorSuccessor(TreeNode *root, int key)
{
    int predecessor = -1;
    int successor = -1;

    // Initializing temporary node with head.
    TreeNode *temp = root;
    // step 1: find the key 
    while(temp && temp -> data != key){
        if(temp -> data < key){
            predecessor = temp -> data; 
            temp = temp -> right; 
        }
        else{
            successor = temp -> data; 
            temp = temp -> left; 
        }
    }

    if(temp){
    // step 2: find the maximum element from the left subtree
        TreeNode * temp1 = temp -> left; 
        while(temp1){
            predecessor = temp1 -> data; 
            temp1 = temp1 -> right; 
        }
    // step 2: find the minimum element from the right subtree
        TreeNode * temp2 = temp -> right; 
        while(temp2){
            successor = temp2 -> data; 
            temp2 = temp2 -> left; 
        }   
    }
    return make_pair(predecessor, successor);
}

