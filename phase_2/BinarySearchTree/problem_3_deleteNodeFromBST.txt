/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* minVal(TreeNode* root){
        if(root == NULL){
            return root; 
        }

        TreeNode* temp = root; 
        while(temp -> left != NULL){
            temp = temp -> left; 
        }
        return temp;  
    }
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL){
            return root;
        }

        if(key == root -> val){
            // 0 child 
            if(root -> left == NULL && root -> right == NULL){
                delete root; 
                return NULL; 
            }

            // 1 child 

            if(root -> left != NULL && root -> right == NULL){
                TreeNode* temp = root -> left;
                delete root; 
                return temp; 
            }

            if(root -> right != NULL && root -> left == NULL){
                TreeNode* temp = root -> right; 
                delete root; 
                return temp; 
            }
            
            // 2 child 
            if(root -> right != NULL && root -> left != NULL){
                int minValue = minVal(root -> right) -> val; 
                root -> val = minValue; 
                root -> right = deleteNode(root->right,minValue); 
                return root; 
            }
        }
        else if(root -> val < key){
            root -> right = deleteNode(root->right,key); 
        }
        else{
            root -> left = deleteNode(root->left,key); 
        }
        return root; 
    }
};
