/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:  
    vector<int> sorted(vector<int> preorder){
        sort(preorder.begin(),preorder.end()); 
        return preorder;
    }

    TreeNode* solve(vector<int> &in,vector<int> &pre,int &preO,int left,int right){
        if(left > right){
            return NULL; 
        }

        TreeNode* ans = new TreeNode(pre[preO]); 
        int pos = 0; 
        while(in[pos] != pre[preO]) pos ++; 
        preO ++; 
        ans -> left = solve(in,pre,preO,left,pos - 1); 
        ans -> right = solve(in,pre,preO,pos+1,right); 
        return ans; 
    }
   

public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        // Approach 1: 
        // get inorder iteration using the sorting the vector;
        // use the approach for solving constructing tree from the inorder and the preorder  
        vector<int> inorder = sorted(preorder); 
        int preOrderIndex = 0;
        TreeNode* ans = solve(inorder,preorder,preOrderIndex,0,inorder.size()-1); 
        return ans;
   }
};


// approach 2: refer vallidate bst 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:  
    vector<int> sorted(vector<int> preorder){
        sort(preorder.begin(),preorder.end()); 
        return preorder;
    }

    TreeNode* solve(vector<int> &in,vector<int> &pre,int &preO,int left,int right){
        if(left > right){
            return NULL; 
        }

        TreeNode* ans = new TreeNode(pre[preO]); 
        int pos = 0; 
        while(in[pos] != pre[preO]) pos ++; 
        preO ++; 
        ans -> left = solve(in,pre,preO,left,pos - 1); 
        ans -> right = solve(in,pre,preO,pos+1,right); 
        return ans; 
    }
   
    TreeNode* solve(vector<int> preorder,int min,int max,int &i){
        if(i >= preorder.size() || preorder[i] < min || preorder[i] > max){
            return NULL; 
        }
        int currentVal = preorder[i ++]; 
        TreeNode* ans = new TreeNode(currentVal); 
        ans -> left = solve(preorder,min,currentVal-1,i); 
        ans -> right = solve(preorder,currentVal+1,max,i); 
        return ans; 
    }

public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        // Approach 1: 
        // get inorder iteration using the sorting the vector;
        // use the approach for solving constructing tree from the inorder and the preorder  
        // vector<int> inorder = sorted(preorder); 
        // int preOrderIndex = 0;
        // TreeNode* ans = solve(inorder,preorder,preOrderIndex,0,inorder.size()-1); 
        // return ans;
   
        // approach 2: 
        int max = INT_MAX; 
        int min = INT_MIN; 
        int i = 0; 
        return solve(preorder,min,max,i);    
   }

};