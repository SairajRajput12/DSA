/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private: 
unordered_set<int> myset;
    void inorder(vector<int> &nums,TreeNode* root){
        if(root == NULL){
            return; 
        }

        inorder(nums,root->left); 
        nums.push_back(root->val); 
        inorder(nums,root->right); 
    }

    bool callForSmall(TreeNode* root,int k,int sum,vector<int> nums){
        int i = 0; 
        int j = nums.size()-1; 
        while(i < j){
            int sum = nums[i] + nums[j]; 
            if(sum == k){
                return true; 
            }
            else if(sum < k){
                i ++; 
            }
            else{
                j --; 
            }
        }
        return false; 
    }

    bool solve(TreeNode* root,int k){
        if(root == NULL){
            return false; 
        }

        if(myset.count(k-root->val) > 0){
            return true; 
        }
        myset.insert(root->val); 
        bool ans1 = solve(root->left,k); 
        bool ans2 = solve(root->right,k); 
        return (ans1 || ans2); 
    }


public:
    bool findTarget(TreeNode* root, int k) {
            // then the target will be present in the left subtree 
            // vector<int> nums; 
            // inorder(nums,root); 
            // return callForSmall(root,k,0,nums); // 2 3 4 5 6 7 

            // APPROACH 2: using recursion 
            return solve(root,k); 
        
    }