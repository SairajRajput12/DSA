/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {

    // recursive approach 
        // if(root == NULL){
        //     return root; 
        // }

        // TreeNode* node = new TreeNode(); 

        

        // if(val > root -> val){
        //     node = searchBST(root -> right,val); 
        // }
        // else if(val < root -> val){
        //     node = searchBST(root -> left,val); 
        // }
        // else{
        //     node = root; 
        // }

        // return node;

    // iterative approach 
        if(root == NULL){
            return root; 
        } 

        TreeNode* temp = root; 
        while(root){
            if(root -> val < val){
                if(root -> right != NULL){
                    root = root -> right; 
                }
                else{
                    temp = root; 
                    break; 
                }
            }
            else if(root -> val > val){
                if(root -> left != NULL){
                    root = root -> left; 
                }
                else{
                    temp = root;
                    break;  
                }
            }
            else{
                temp = root; 
                break; 
            }
        }

        if(temp -> val != val){
            return NULL; 
        }
        return temp; 
    }
};