class Solution {
    void genrate(vector<vector<int>> &result,vector<int>& nums,vector<int>& sample,int start,int end){
        if(start > end){
            return; 
        }
        for (int i = start; i <= end; ++i) {
            result.push_back(std::vector<int>(nums.begin() + start, nums.begin() + i + 1));
        }

        genrate(result, nums,sample, start + 1, end);
    }
    

    long long f(vector<int> nums){
        int n = nums.size(); 
        vector<int> left(n,-1);
        vector<int> right(n,n); 
        stack<int> st;

        // find NSL 
        for(int i = 0; i < nums.size(); i ++){
            while(!st.empty() && nums[st.top()] <= nums[i]){
                st.pop(); 
            }
            if(!st.empty()){
                left[i] = st.top(); 
            }
            st.push(i); 
        }

         st = stack<int>();
        // find NSR
        for(int i = (n-1); i >= 0; i --){
            while(!st.empty() && nums[st.top()] < nums[i]){
                st.pop(); 
            }
            if(!st.empty()){
                right[i] = st.top(); 
            }
            st.push(i); 
        }

        long long ans = 0; 
        for(int i = 0; i < n; i ++){
            int e = nums[i]; 
            int leftR = i - left[i]; 
            int rightR = right[i] - i; 
            ans += (long long)(leftR)*(long long)(rightR)*(long long)(e); 
        }
        return ans;
    }


    public:
    long long subArrayRanges(vector<int>& nums) {
        // appraoch 1: my appraoch but not optimal 
        // int n = nums.size(); 
        // vector<vector<int>> possible; 
        // vector<int> sample; 
        // genrate(possible,nums,sample,0,n-1); 
        // auto it = possible; 
        // long long ans = 0; 
        // for (auto& c : possible) {
        //     auto x = *std::min_element(c.begin(), c.end()); 
        //     auto y = *std::max_element(c.begin(), c.end()); 
        //     auto diff = y - x; 
        //     ans += diff; 
        // }
        // return ans; 

        // approach 2: brute force appraoch 
        // int n = nums.size(); 
        // long long ans = 0; 
        // for(int i = 0; i < n; i ++){
        //     int minv = nums[i];
        //     int maxv = nums[i]; 
        //     for(int j = i; j < n; j ++){
        //         minv = min(minv,nums[j]); 
        //         maxv = max(maxv,nums[j]); 
        //         ans += (maxv - minv); 
        //     }
        // }
        // return ans; 

        // approach 3: using stack easy appraoch 
        long long mx = f(nums);
        for (int i = 0; i < nums.size(); ++i) nums[i] *= -1;
        long long mi = f(nums);
        return mx + mi;
    }
};
