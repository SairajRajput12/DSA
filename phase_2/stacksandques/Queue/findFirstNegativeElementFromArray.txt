#include<bits/stdc++.h>
using namespace std;

int findNeg(queue<int> q){
    int ans = 0;
    while(!q.empty()){
        ans = (q.front() < ans) ? q.front() : ans;
        q.pop();
    }
    return ans;
}

vector<int> firstNegative(vector<int> arr, int n, int K) {
    // step 1: first push the elements until k is reached
    // queue<int> q;
    // int i = 0;
    // while(i < k){
    //     q.push(arr[i]);
    //     i++;
    // }

    // vector<int> answer;
    // // we now have the window-sized queue
    // while(i <= n){
    //     int ans = findNeg(q);
    //     answer.push_back(ans);
    //     q.pop();
    //     q.push(arr[i]); 
    //     i++;
    // }

    // return answer; 

	// approach 2:
	vector<int> ans; 
	deque<int> q; 

	for(int i = 0; i < K; i ++){
		if(arr[i] < 0){
			q.push_back(i); 
		}
	}

	if(q.size() > 0){
		ans.push_back(arr[q.front()]); 
	}
	else{
		ans.push_back(0); 
	}

	for(int i = K; i < n; i ++){
		// removal logic: 
		// queue empty nko chahiye and uski length not more than k chahiye 
		if(!q.empty() && i - q.front() >= K){
			q.pop_front(); 
		}

		if(arr[i] < 0){
			q.push_back(i); 
		}
		
		// chale element add kare 
		if(q.size() > 0){
			ans.push_back(arr[q.front()]); 
		}
		else{
			ans.push_back(0); 
		}
	}

	return ans; 

	// steps: 

	// 1. Initialize a deque `q` and a vector `ans`.
	// 2. Iterate over the first `K` elements of the array (`arr`).
	//    - If the element is negative, push its index to the back of the deque.
	// 3. Check if the deque is not empty.
	//    - If not empty, push the value of the front element of the deque to the `ans` vector.
	//    - If empty, push 0 to the `ans` vector.
	// 4. Iterate over the remaining elements of the array (starting from index `K`).
	//    - Check if the deque is not empty and the front element's index is outside the current window (`i - q.front() >= K`).
	//       - If true, pop the front element from the deque.
	//    - If the current element is negative, push its index to the back of the deque.
	//    - Check if the deque is not empty.
	//       - If not empty, push the value of the front element of the deque to the `ans` vector.
	//       - If empty, push 0 to the `ans` vector.
	// 5. Return the `ans` vector containing the desired values.}
}
