class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) { 

        // brute force approach 1:using stack 
        // vector<int> ans;
        // for(int i=0;i<nums1.size();i++){
        //     int max=-1;
        //     for(int j=0;j<nums2.size();j++){
        //         int index=j;
        //         if(nums1[i]==nums2[j]){ // Found element in nums2 that matches current element in nums1
        //              while(index!=nums2.size()){ // Iterate through remaining elements in nums2 to find next greater element
        //                 if(nums2[index]>nums1[i]){
        //                     max=nums2[index]; // Update max if we find a greater element
        //                     break;
        //                 }
        //                 index++;
        //             }
        //        }
        //     }
        //     ans.push_back(max);
        // }
        // return ans;
    

    // approach 2: using stack
        // vector<int> ans; 
        // stack<int> storeSubsetElementIndex; 
        // for(int i = 0; i < nums1.size(); i ++){
        //     int curr = nums1[i]; 
        //     for(int j = 0; j < nums2.size(); j ++){
        //         if(curr == nums2[j]){
        //             storeSubsetElementIndex.push(j); 
        //         }
        //     }
        // }

        // while(!storeSubsetElementIndex.empty()){
        //     int e = storeSubsetElementIndex.top(); 
        //     storeSubsetElementIndex.pop(); 
        //     int j = 0;  
        //     for(j = (e+1); j < nums2.size(); j ++){
        //         if(nums2[e] <= nums2[j]){
        //             ans.push_back(nums2[j]); 
        //             break; 
        //         }
        //     }
        //     if(j == (nums2.size())){
        //         ans.push_back(-1); 
        //     }
        // }
        // reverse(ans.begin(), ans.end());
        // return ans; 

        // approach 3: optimised solution: using stack and map 
        // i will find the next greater element for all of nums2 array  
        // so we will iterate in reverse direction: 
        // 2
        // map: 2-> -1 
        // stack: -1 2

        // 2 4
        // map: 2-> -1,4->-1
        // stack: -1 2 4

        // 2 4 3 
        // map: 2-> -1,4 -> -1 , 3 -> 4
        // stack: -1 3 

        // 2
        // map: 2-> -1 
        // stack: -1 2

        // code: 
        vector<int> res; 
        stack<int> st; 
        unordered_map<int, int> umap;
        // st.push(-1); 
        for(int i = nums2.size()-1; i >= 0; i --){
            while(!st.empty() && st.top() <= nums2[i]){
                st.pop(); 
            }

            if(st.empty()){
                umap[nums2[i]] = -1; 
            }
            else{
                umap[nums2[i]] = st.top(); 
            }
            st.push(nums2[i]); 
        }

        for(int i = 0; i < nums1.size(); i ++){
           res.push_back(umap[nums1[i]]);  
        }
        return res; 
    }
};
