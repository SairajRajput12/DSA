#include <bits/stdc++.h>
using namespace std;

bool isOperand(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
}

string postToInfix(string postfix) {
    stack<string> st;

    for (int i = 0; i < postfix.size(); i++) {
        // if it is operand
        if (isOperand(postfix[i])) {
            string x = string(1, postfix[i]); // Convert char to string
            st.push(x);
        } else {
            // it is an operator
            string x = st.top();
            st.pop();
            string y = st.top();
            st.pop();
            string sam = "(" + y + postfix[i] + x + ")";
            st.push(sam);
        }
    }
    string ans;
    if (!st.empty()) {
        ans = st.top();
        st.pop();
    }

    return ans;
}

string prefixToInfixConversion(string &s){
	// Write your code here.
	// what to do?? 
	// reverse string  
	// then do postfix to infix return the answer 
	string sample = ""; 
	for(int i = 0; i < s.size(); i ++){
		sample += s[s.size()-1 - i]; 
	}

	string result = postToInfix(sample); 
	string ans; 
	for(int i = 0; i < result.size(); i ++){
		if(result[result.size()-1 - i] == ')'){
			ans += '('; 
		}
		else if(result[result.size()-1 - i] == '('){
			ans += ')'; 
		}
		else{
			ans += result[result.size()-1 - i]; 
		}
	}
	return ans; 
}
