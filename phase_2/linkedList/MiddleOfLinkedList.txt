/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private: 
    int getLength(ListNode* head){
        int cnt = 1; 
        while(head -> next != NULL){
            cnt ++; 
            head = head -> next; 
        }
        return cnt; 
    }

public:
    ListNode* middleNode(ListNode* head) {
        // appraoach 1: 
        // int length = getLength(head); 
        // int position = ((length)/2) + 1; 
        // int cnt = 1; 
        // while(cnt < position){
        //     head = head -> next; 
        //     cnt ++; 
        // }
        // return head; 

        // time complexity: O(N). 
        // space complexity: O(1). 

        // appraoch 2: 
        // 2 players : 1] one is pro and another is noob. 
        /*
            1] first completed n meter and another completes n/2 meters. 
            2] length of linked list nikalo. 
            3] if length is even -> then middle  = length/2 + 1; 
            4] if length is odd -> then middle = (length)/2 + 1; 
        */   
        // 1 node wali. 
        if(head == NULL || head -> next == NULL){
            return head; 
        }

        // 2 node wali. 
        if(head -> next -> next == NULL){
            return head -> next; 
        }

        ListNode* proPlayer = head->next; 
        ListNode* noobPlayer = head; 
        // 1] if empty list -> return null. 
        // 2] if it is one node list -> return the head. 
        // 3] 2 node list -> right wala element. head-> next. 
        while(proPlayer != NULL){
            proPlayer = proPlayer -> next; 
            if(proPlayer != NULL){
                proPlayer = proPlayer -> next; 
            } 
            noobPlayer = noobPlayer -> next; 
        }
        return noobPlayer; 
    }
};
