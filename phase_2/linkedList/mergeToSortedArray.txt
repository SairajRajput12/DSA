/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
ListNode* solve(ListNode* first,ListNode* second)
{
    // if only one element is present in the linked list. 
    if(first -> next == NULL)
    {
        first -> next = second; 
        return first; 
    }
    ListNode* curr1 = first; 
    ListNode* nextone = curr1 -> next; 
    ListNode* curr2 = second; 
    ListNode* next2 = curr2 -> next; 

    while(nextone != NULL && curr2 != NULL)
    {
        if((curr2 -> val >= curr1-> val) && ((curr2->val <= nextone-> val)))
        {
            // add node in between 2 nodes. 
            curr1 -> next = curr2; 
            next2 = curr2 -> next;  
            curr2 -> next = nextone; 
            // update the node. 
            curr1 = curr2; 
            curr2 = next2; 
        } 
        else
        {
            // curr1 and nextone ko age badhana hai.. 
            curr1 = nextone; 
            nextone = nextone -> next; 
            if(nextone  == NULL)
            {
                curr1 -> next = curr2; 
                return first; 
            }
        }
    }
    return first;
}

public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        /*
            Approach 1: 
            if(head1 == NULL){ // if head of 1st ll is null.  
                return head2; // head of 2nd ll. 
            }

            if(head2 == NULL){
                return head1; 
            }

            e.g, 
                h1 -> 1 -> 3 -> 5 -> NULL. 
                h2 -> 2 -> 4 -> 5 -> NULL. 
                prev -> data <= temp -> data <= curr -> data. 
                if it is true then daldo and update the linked list. 
                else pointer ko age badao. 

                prev -> next = temp; 
                temp -> next = curr; 
                prev = temp; 

        
        */
        if(list1 == NULL){
            return list2; 
        }
        
        if(list2 == NULL){
            return list1; 
        }

        if(list1->val <= list2->val)
        {
            return solve(list1,list2); 
        }
        else{
            return solve(list2,list1); 
        }

        return list1;       
    }
                
};
