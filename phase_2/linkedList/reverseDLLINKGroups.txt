void reverse(Node*& first, Node*& second) {
    Node* start = first;
    Node* end = second;
    while (start != end) {
        int temp = start->data;
        start->data = end->data;
        end->data = temp;
        start = start->next;
        end = end->prev;
    }
}

Node* reverseDLLInGroups(Node*& head, int k) {

	// approach 1: 
    // if (head == nullptr || head->next == nullptr) {
    //     return head;
    // }

    // int cnt = 0, len = 1;
    // Node* end = head;

    // // Calculate the length of the linked list
    // while (end->next != nullptr) {
    //     end = end->next;
    //     len++;
    // }

    // // If k is greater than or equal to the length, reverse the entire list
    // if (k >= len) {
    //     reverse(head, end);
    //     return head;
    // } else {
    //     cnt = 0;
    //     Node* endwala = head;
    //     Node* pichewala = head;
    //     Node* prevEnd = nullptr; // Keep track of the previous end for linking groups

    //     while (endwala != nullptr) {
    //         if (cnt >= k) {
    //             reverse(pichewala, endwala);
    //             if (prevEnd != nullptr) {
    //                 prevEnd->next = pichewala;
    //             } else {
    //                 // Update the head if this is the first group
    //                 head = pichewala;
    //             }
    //             endwala->next = nullptr; // Disconnect the reversed group
    //             pichewala = endwala->next;
    //             cnt = 0;
    //         }
    //         cnt++;
    //         prevEnd = endwala;
    //         endwala = endwala->next;
    //     }
    //     return head;

	// approach 2: using recursion 
		// if(head == NULL)
		// {
		// 	return head; 
		// }

		// Node* start = head,*prev = NULL,*forward;
		// int cnt = k; 
		// while(start != NULL && cnt > 0)
		// {
		// 	forward = start -> next; 
		// 	start -> next = prev; 
		// 	if(prev != NULL)
		// 	{
		// 		prev -> prev = start;
		// 	}
		// 	prev = start; 
		// 	start = forward;  
		// 	cnt --; 
		// }

		// head -> next = reverseDLLInGroups(start,k); 
		// return prev;

	// approach 3: 
	// so we will devide linked list into sub list and reverse each list and after reversing we will join them. 
	Node* curr = head; 
	Node* prev = NULL; 
	Node* forward = NULL; 
	Node* tail = NULL; 
	Node* join = NULL; 
	Node* newHead = NULL; 
	while(curr != NULL){
		int count = k; 
		join = curr; 
		prev = NULL; 
		while(curr && count > 0)
		{
			forward = curr -> next;  
			curr -> next = prev; 
			if(prev != NULL)
			{
				prev -> prev = curr; 
			}
			prev = curr; 
			curr = forward; 
			count -= 1; 
		}

		if(newHead == NULL)
		{
			newHead = prev; 
		}

		if(tail)
		{
			tail -> next = prev; 
			prev -> prev = tail; 
		}

		tail = join; 

	}

	return newHead; 
}



