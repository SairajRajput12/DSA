/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* findMid(ListNode* head)
    {
        ListNode* fast = head -> next; 
        ListNode* slow = head; 

        while(fast != NULL && fast -> next != NULL)
        {
            slow = slow -> next; 
            fast = fast -> next -> next; 
        }

        return slow; 
    }

    ListNode* merge(ListNode* left,ListNode* right){
        if(left == nullptr) return right; 
        if(right == nullptr) return left; 

        ListNode* answer = new ListNode(-1); 
        ListNode* temp = answer; 

        while(left != nullptr and right != nullptr){
            if(left -> val < right -> val){
                temp -> next = left; 
                temp = left; 
                left = left -> next; 
            }
            else{
                temp -> next = right;
                temp = right; 
                right = right -> next; 
            }
        }

        while(left != nullptr){
            temp -> next = left; 
            temp = left; 
            left = left -> next; 
        }

        while(right != nullptr){
            temp -> next = right; 
            temp = right; 
            right = right -> next; 
        }

        return answer -> next; 
    }

    


    ListNode* sortList(ListNode* head) {
        // insertion sort 
        // if (head == nullptr || head->next == nullptr) return head;
        // ListNode* current = head; 
        // ListNode* ncurrent = current; 

        // while(current != nullptr){
        //     ncurrent = current -> next; 
        //     while(ncurrent != nullptr){
        //         if(current -> val > ncurrent -> val){
        //             int temp = current->val;
        //             current->val = ncurrent->val;
        //             ncurrent->val = temp;
        //         }
        //         ncurrent = ncurrent -> next; 
        //     }
        //     current = current -> next; 
        // }

        // return head;

        // using merge sort 
        if(head == nullptr or head -> next == nullptr){
            return head; 
        } 

        ListNode* mid = findMid(head); 
        ListNode* left = head; 
        ListNode* right = mid -> next; 
        mid -> next = nullptr; 
        left = sortList(left); 
        right = sortList(right); 
        ListNode* ans = merge(left,right); 
        return ans; 
    }
};