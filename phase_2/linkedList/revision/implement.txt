class Node{
public: 
    int data; 
    Node* next; 
    Node(int data){
        this-> data = data; 
        this-> next = NULL; 
    }

    ~Node(){
        int value = this -> data; 
        if(this -> next != NULL){
            delete next;  
            this -> next = NULL; 
        }

        cout << " memory is free for node with data " << data << endl; 
    }
};


class MyLinkedList {
public:
Node* head; 
Node* tail; 
int length; 
    MyLinkedList() {
        length = 0; 
        head = nullptr; 
        tail = nullptr; 
    }
    
    int get(int index) {
        if(head == nullptr or index < 0 or index >= length){
            return -1; 
        }

        Node* current = head; 
        while(index != 0){
            current = current -> next; 
            index --; 
        } 

        return current -> data;        
    }
    
    void addAtHead(int val) {
        Node* newNode = new Node(val); 
        if(head == nullptr){
            head = newNode; 
            tail = newNode; 
            length ++;
            return; 
        }
        length ++; 
        newNode -> next = head; 
        head = newNode;  
    }
    
    void addAtTail(int val) {
        Node* newNode = new Node(val);
        if(head == nullptr){ 
            head = newNode; 
            tail = newNode; 
            length ++;  
            return; 
        }

        tail -> next = newNode;
        tail = tail -> next;  
        length ++; 
    }
    
    void addAtIndex(int index, int val) {
        if (index < 0 || index > length) { // Correct index check
            return;
        }

        
        if(index == 0 or head == nullptr){
            // case one we have to insert at head 
            addAtHead(val); 
            return; 
        }
        
        if (index == length) {
            addAtTail(val);
            return;
        }

        Node* current = head; 
        for (int i = 0; i < index - 1; i++) {
            current = current->next;
        }


        

        Node* newNode = new Node(val); 
        newNode -> next = current -> next; 
        current -> next = newNode; 
        length ++; 
        
    }
    
    void deleteAtIndex(int index) {
        if (index < 0 || index >= length) { // Correct index check
            return;
        }

        Node* toDelete = nullptr;
        if (index == 0) {
            toDelete = head;
            head = head->next;
            if (head == nullptr) {
                tail = nullptr;
            }
        } else {
            Node* current = head;
            for (int i = 0; i < index - 1; i++) {
                current = current->next;
            }
            toDelete = current->next;
            current->next = toDelete->next;
            if (toDelete == tail) {
                tail = current;
            }
        }

        toDelete->next = nullptr;
        delete toDelete;
        length--; // Update length

    }
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */