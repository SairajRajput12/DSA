#include<bits/stdc++.h> 

using namespace std;

/**
 * Definition of doubly linked list:
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this -> data = data;
 *          this -> prev = prev;
 *          this -> next = next;
 *      }
 * };
 */

vector<pair<int, int>> findPairs(Node* head, int k)
{
    // approach 1:  using set

    // vector<pair<int,int>> ans; 
    // unordered_set<int> seen; 
    // Node* current = head; 
    // while(current != NULL)
    // {
    //     int complement = k - current -> data; 
    //     if(seen.count(complement) > 0)
    //     {
    //         ans.push_back({current -> data,complement}); 
    //     }
    //     seen.insert(current -> data); 
    //     current = current -> next; 
    // }
    // return ans;   

    // approach 2: brute force approach
    // vector<pair<int, int>> ans;
    // Node * ptr1 = head;

    // // Traverse the linked list to the end.
    // while (ptr1 != NULL)
    // {
    //     Node * ptr2 = ptr1->next;
    //     while (ptr2 != NULL)
    //     {
    //         if (ptr1->data + ptr2->data == k)
    //         {
    //             ans.push_back(make_pair(ptr1->data, ptr2->data));
    //         }

    //         ptr2 = ptr2->next;
    //     }

    //     ptr1 = ptr1->next;
    // }

    // return ans;

    // approach 3: 2 pointers approach
    // if end + start != k && end > start -> shift end 
    // if start + end != k && end < start -> shift start 
    // if start + end == k -> add in ans
    Node* end = head; 
    vector<pair<int, int>> ans;
    while(end -> next  != NULL)
    {
        // end = head; 
        end = end -> next; 
    }

    Node* start = head; 
    
    while(start -> data < end -> data)
    {
        if(start -> data + end -> data == k)
        {
            ans.push_back({start->data,end->data}); 
            start = start -> next; 
            end = end -> prev; 
        }
        else if(start -> data + end -> data < k) 
        {
            start = start -> next; 
        }
        else if(start -> data + end -> data > k)
        {
            end = end -> prev; 
        }
    }

    return ans; 
}

