#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

Node* detectLoop(Node* head){
	if(head == NULL || head -> next == NULL){
		return head; // no loop. 
	}

	Node* slow = head; 
	Node* fast = head; 

	while(fast != NULL && fast-> next != NULL){
		fast = fast -> next; 
		if(fast != NULL){
			fast = fast -> next; 
		}
		slow = slow ->next; 
		if(slow == fast) return slow; 
	}

	return NULL; // means there is no loop. 
}

Node* getStartNode(Node* head){
	if(head == NULL){
		return NULL; 
	}

	Node* intersaction = detectLoop(head);  
	if(intersaction == NULL) return NULL; 
	Node* slow = head;
	while(slow != intersaction){
		slow = slow -> next; 
		intersaction = intersaction -> next; 
	}

	return slow; 
}


void removeLoop(Node* &head,Node* ans1){
	if(head == NULL){
		return; 
	}

	Node* startingNodeOfLoop = getStartNode(head);  
	if(startingNodeOfLoop == NULL) return; 
	Node* temp = startingNodeOfLoop; 
	while(temp -> next != startingNodeOfLoop){ // jab tak agli node starting node na ho tabtak chalna. 
		temp = temp -> next; 

	}
	temp -> next = NULL; // loop removed; 
}

bool detectAndRemoveCycle(Node* &head)
{
    // Write your code here
	// approach 1: 
	// Node* ans1 = getStartNode(head);  
	// if(ans1 != NULL){
	// 	removeLoop(head,ans1);
	// 	return true; 
	// }
	// else{
	// 	return false; 
	// }
	// return ans; 

	// approach 2: brute force. 

	// if(head == NULL || head -> next == NULL){
	// 	return false; 
	// }

	// int i = 1; 
	// Node* curr = head-> next; 
	// Node* prev = head; 

	// while(curr != NULL){
	// 	prev = head; 
	// 	for(int j = 0; j < i; j ++){
	// 		if(curr -> next == prev){
	// 			curr->next = NULL; 
	// 			return true; 
	// 		}
	// 		prev = prev -> next; 
	// 	}

	// 	curr = curr -> next; 
	// 	i++; 
	// }

	// return false; 

	// approach 3:by getting the length of an loop. 
	if(head == NULL || head->next == NULL){
		return false; 
	}

	Node* slow = head; 
	Node* fast = head -> next -> next; 
	while(slow != fast){
		if(fast == NULL || fast->next == NULL){
			return false; 
		}
		fast = fast -> next -> next; 
		slow = slow -> next; 
	}

	Node* ptr1 = slow; 
	Node* ptr2 = slow; 

	int l = 1; 
	while(ptr1 -> next != ptr2){
		ptr1 = ptr1 -> next; 
		l ++; 
	}

	ptr1 = head; 
	ptr2 = head; 

	for(int i = 0; i < l; i ++){
		ptr2 = ptr2 -> next; 
	}

	while(ptr2 != ptr1){
		ptr1 = ptr1 -> next; 
		ptr2 = ptr2 -> next; 
	}

	// removing loop. 
	while(ptr2 -> next != ptr1)
	{
		ptr2 = ptr2 -> next; 
	}

	ptr2 -> next = NULL; 
	return true; 
}

