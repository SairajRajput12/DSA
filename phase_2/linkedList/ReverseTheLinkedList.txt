/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private: 
    void solve(ListNode* &head,ListNode* curr,ListNode* prev){
        if(curr == NULL){
            head = prev; 
            return; 
        }
        ListNode* forward = curr -> next; 
        solve(head,forward,curr); 
        curr -> next = prev; 
    }

    // it will return the head of the reversed list: 
    ListNode* FollowTheBuzzard(ListNode* &head){
        if(head == NULL || head->next == NULL){
            return head; 
        } 

        ListNode* remainingHead = FollowTheBuzzard(head->next); 
        head -> next -> next = head; 
        head -> next = NULL; 
        return remainingHead; 
    }


public:
    ListNode* reverseList(ListNode* head) {

    // approach: 1    
    // if(head == NULL || head-> next == NULL){ // single node asla tar: 
    //     return head; 
    // }
    //     ListNode* prev = NULL; 
    //     ListNode* curr = head; 
    //     ListNode* forward = NULL;  
    //     while(curr != NULL){
    //         forward = curr -> next; 
    //         curr->next = prev; 
    //         prev = curr; 
    //         curr = forward; 
    //     }
    //     return prev; 
    // Time complexity: O(N) 
    // Space complexity: O(1)
 
    // approach 2: 
    // Recursive solution 
    // ListNode* curr = head; 
    // ListNode* prev = NULL; 
    // solve(head,curr,prev); 
    // return head; 

    // approach 3: 
    return FollowTheBuzzard(head);  
    //Time complexity: O(N) 
    // space complexity: O(1). 
    }
};
