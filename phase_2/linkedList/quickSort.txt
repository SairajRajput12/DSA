//{ Driver Code Starts
#include <iostream>
#include <cstdio>
using namespace std;
 
/* a node of the singly linked list */
struct node
{
    int data;
    struct node *next;
    
    node(int x){
        data = x;
        next = NULL;
    }
};

/* A utility function to insert a node at the beginning of linked list */
void push(struct node** head_ref, int new_data)
{
    /* allocate node */
    struct node* new_node = new node(new_data);
 
    /* link the old list off the new node */
    new_node->next = (*head_ref);
 
    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}
 
/* A utility function to print linked list */
void printList(struct node *node)
{
    while (node != NULL)
    {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}
void quickSort(struct node **headRef);
int main()
{
	int t,n,x;
	cin>>t;
	while(t--){
		
        
        cin>>n;n=n-1;
		cin>>x;
        node *temp,*head = new node(x);
        temp=head;
        while(n--)
        {
			cin>>x;
          temp->next=new node(x);
          temp=temp->next;
			}
    
    quickSort(&head);
 
    printList(head);
 while(head!= NULL){
     temp=head;
     head=head->next;
     free(temp);
     
 }
	}
    return 0;
}
// } Driver Code Ends


 
/* a node of the singly linked list 
struct node
{
    int data;
    struct node *next;
    
    node(int x){
        data = x;
        next = NULL;
    }
}; */

//you have to complete this function

    void Swapdataue (struct node* a ,struct node* b){
        int temp = a->data;
        a->data = b->data;
        b->data = temp;
        
    }
    
    
    struct node* Partition(struct node* start ,struct node* end){
        int pivotdataue = start->data;
        struct node* p = start;
        struct node* q = start -> next;
        while(q != end){
            if (q -> data < pivotdataue){
                p = p -> next;
                Swapdataue(p,q);
            }
            q = q -> next;
        }
        Swapdataue(p,start);
        return p;
    }
        
        
    void QuickSort(struct node* start ,struct node* end){
        if (start != end){
            struct node* mid = Partition(start ,end);
            QuickSort(start,mid);
            QuickSort(mid->next,end);
        }
        
    }
// Function to perform quicksort on the linked list

void quickSort(struct node** headRef) {
    
    QuickSort(*headRef, NULL);
}






