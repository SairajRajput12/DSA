// approach 1: (gfg)

//{ Driver Code Starts
#include <bits/stdc++.h>

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};

using namespace std;

void printList(Node *Node)
{
    while (Node != NULL)
    {
        printf("%d ", Node->data);
        Node = Node->bottom;
    }
}

Node* flatten (Node* root);

int main(void) {

	int t;
	cin>>t;
	while(t--){
    int n,m,flag=1,flag1=1;
    struct Node * temp=NULL;
	struct Node * head=NULL;
	struct Node * pre=NULL;
	struct Node * tempB=NULL;
	struct Node * preB=NULL;
		cin>>n;
        int work[n];
		for(int i=0;i<n;i++)
            cin>>work[i];
		for(int i=0;i<n;i++){
			m=work[i];
			--m;
			int data;
			scanf("%d",&data);
			temp = new Node(data);
			temp->next = NULL;
			temp->bottom = NULL;
			
			if(flag){
				head = temp;
				pre = temp;
				flag = 0;
				flag1 = 1;
			}
			else{
				pre->next = temp;
				pre = temp;
				flag1 = 1;
			}
			for(int j=0;j<m;j++){
				
				int temp_data;
				scanf("%d",&temp_data);
				tempB = new Node(temp_data);

				if(flag1){
					temp->bottom=tempB;
					preB=tempB;
					flag1=0;
				}
				else{
					preB->bottom=tempB;
					preB=tempB;
				}
			}
		}
		   Node *fun = head;
		   Node *fun2=head;

            Node* root = flatten(head);
            printList(root);
            cout<<endl;

	}
	return 0;
}

// } Driver Code Ends


/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* bottom;
};
*/

Node* Merge(Node* left,Node* right)
{
	if(left==NULL)
	{
		return right;
	}
	if(right==NULL)
	{
		return left;
	}
	Node* ans=new Node(-1);
	Node* temp=ans;
	while(left!=NULL && right!=NULL)
	{
		if(left->data<right->data)
		{
			temp->bottom=left;
			temp=left;
			left=left->bottom;
			
		}
		else
		{
			temp->bottom=right;
			temp=right;
			right=right->bottom;
		}
	}
	while(left!=NULL)
	{
		temp->bottom=left;
		temp=left;
		left=left->bottom;
	}
	while(right!=NULL)
	{
		    temp->bottom=right;
			temp=right;
			right=right->bottom;    
	}
	ans=ans->bottom;
	return ans;
}

Node* flatten(Node *head)
{
	   if(head==NULL || head->next==NULL )
	   {
		   return head;
	   }
	   Node* down =head;
	   Node* right=flatten(head->next);
	   down->next=NULL;
	   Node* ans2=Merge(down,right);
	   return ans2;
        
}


// another approach:(leetcode) 


/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
private: 
    Node* solve(Node* &head)
    {
        // approach 1: 
        
        if(head == NULL || (head -> child == NULL && head -> next == NULL))
        {
            return head; 
        }

        Node* right = head -> next; 
        Node* down = NULL; 

        if(head -> child != NULL)
        {
            Node* temp = head -> child; 
            head -> next = temp; 
            temp -> prev = head; 
            head -> child = NULL; 

            down = solve(temp); // now traverse the child node. 
            if(down != NULL && right != NULL)
            {
                down -> next = right; 
                right -> prev = down; 
            }

        }

        if(right != NULL)
        {
            return solve(right); 
        }

        return down; 
    }
public:
    Node* flatten(Node* head) {
        solve(head); 
        return head; 
    }
};

