solutions in cpp: 

class Solution {
protected: 
    bool isValid(char c,int row , int col, vector<vector<char>> &board){
        int element = board[row][col];  
        for(int i = 0; i < 9; i ++ ){
            if(board[i][col] == c){
                return false; 
            }
            if(board[row][i] == c){
                return false; 
            }
            if(board[3*(row/3)+i/3][3*(col/3)+i%3] == c){
                // row/3 gives you to which vertical does it belong. 
                return false; 
            }

        }
        return true; 
    }


    bool solve(vector<vector<char>> &board){
        for(int i = 0; i < board.size(); i ++){
            for(int j = 0; j < board[0].size(); j ++){
                 // if it is empty 
                 if(board[i][j] == '.'){
                    for(char a = '1' ; a <= '9'; a ++){
                        if(isValid(a,i,j,board)){
                            board[i][j] = a; 
                            if(solve(board) == true){
                                return true; 
                            }

                            else{
                                board[i][j] = '.';
                            }
                        }
                    }
                 return false; 
                 }

            }
        }

        return true; 
    }


public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board); 
    }
};