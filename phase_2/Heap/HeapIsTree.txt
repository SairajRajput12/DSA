#include <bits/stdc++.h> 
/*************************************************************
 
    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
       public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() 
        {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/
int countNodes(BinaryTreeNode<int>* root){
    if(root == NULL){
        return 0; 
    }

    int cnt = 1 + countNodes(root -> left) + countNodes(root -> right); 
    return cnt; 
}

bool isCBT(BinaryTreeNode<int>* root,int index,int count){
    if(root == NULL){
        return true; 
    }

    if(index >= count){
        return false; 
    }

    else{
        bool left = isCBT(root->left,2*index+1,count); 
        bool right = isCBT(root->right,2*index+2,count); 
        return (left&&right); 
    }
}

bool isMaxOrder(BinaryTreeNode<int>* root){
    if(root -> left == NULL and root -> right == NULL){
        return true;
    }

    if(root -> right == NULL){
        return (root -> data > root -> left -> data); 
    }
    else{
        bool left = isMaxOrder(root -> left); 
        bool right = isMaxOrder(root -> right); 
        return (left and right and (root->data >= root -> left -> data and root -> data >= root -> right -> data ));
    }
}


bool isBinaryHeapTree(BinaryTreeNode<int>* root) 
{
    // Write your code here.
    int index = 0; 
    int totalCount = countNodes(root); 
    if(isCBT(root,index,totalCount) and isMaxOrder(root)){
        return true; 
    }
    else{
        return false; 
    }
}
