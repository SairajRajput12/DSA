class node{
public: 
    int data; 
    int row; 
    int col; 
    
    node(int data,int row,int col){
        this -> data = data; 
        this -> row = row; 
        this -> col = col; 
    }
};


class compare{
public: 
    bool operator()(node* a,node* b){
        return a-> data > b->data; 
    }
    /*
this function uses:
operator overloading: 
            - This is a feature that lets us define operators working for some specific tasks. For example, we can overload the operator “+” and define its functionality to add two strings. Operator loading is also an example of compile-time polymorphism because the compiler already knows at the compile time which operator has to perform the task. 
        
        return_type operator operator_symbol(args){
            //code. 
        }
    */


};

class Solution {
private: 
    int maxi = INT_MIN; 
    int mini = INT_MAX; 
    int start = 0; 
    int end = 0; 
    vector<int> ans;  
    priority_queue<node*,vector<node*>,compare> minHeap; 
public:
    vector<int> smallestRange(vector<vector<int>>& nums) { 
        // version first: 
        // approach 1: 

        // int firstIndex = 0; 
        // int secondIndex = 0; 
        // int thirdIndex = 0; 
        // vector<int> ans; 
        // int minElement = 0; 
        // int maxElement = 0; 
        // int diff = INT_MAX; 
        // while(firstIndex < nums[0].size() and secondIndex < nums[1].size() and thirdIndex < nums[2].size())
        // {
           

        //     int first = nums[0][firstIndex]; 
        //     int second =  nums[1][secondIndex]; 
        //     int third = nums[2][thirdIndex]; 

        //     if(first < second and first < third){
        //         firstIndex ++; 
        //     } 
        //     else if(second < third and second < third){
        //         secondIndex ++; 
        //     }
        //     else if(third < first and third < second){
        //         thirdIndex ++; 
        //     }

        //     int minE = min(first,min(second,third)); 
        //     int maxE = max(first,max(second,third)); 
        //     if(diff < (maxElement-minElement)){
        //         maxElement = maxE; 
        //         minElement = minE; 
        //     }
        // }
        // ans.push_back(minElement); 
        // ans.push_back(maxElement); 
        // return ans; 

        // appraoch 2: 
        // for(int i = 0; i < nums.size(); i ++){
        //     int element = nums[i][0]; 
        //     mini = min(element,mini); 
        //     maxi = max(element,maxi); 
        //     minHeap.push(new node({element,i,0})); 
        // }

        // start = mini; 
        // end = maxi; 

        // while(!minHeap.empty()){
        //     node* temp = minHeap.top(); 
        //     minHeap.pop(); 

        //     mini = temp -> data; 
        //     if(maxi - mini < end - start){
        //         end = maxi; 
        //         start = mini; 
        //     }

        //     if(temp -> col + 1 < nums[temp -> row].size()){
        //         maxi = max(maxi,nums[temp->row][temp->col+1]); 
        //         minHeap.push(new node({nums[temp->row][temp->col+1],temp->row,temp->col+1})); 
        //     }
        //     else{
        //         // if you dry run this code then you will encounter the condition where only one element remains and it causes difference to be 0. 
        //         // which will be cause if i remove this else condition which means i have completely visited one of the kth list. 
                
        //         break; 
        //     }
        // }
        // ans = {start,end}; 
        // return ans;     


        // approach 3: 
        vector<pair<int, int>> ordered; // (number, group)
        // it is the mapping of the each value with the row
        for (size_t k = 0; k < nums.size(); ++k)
            for (auto n: nums[k]) ordered.push_back({n, k});
        sort(ordered.begin(), ordered.end());

        for(int i = 0; i < ordered.size(); i ++){
            int x = ordered[i].first; 
            int y = ordered[i].second; 
            cout << x << "  "<< y << endl; 
        }
        cout << endl; 

        
        int i = 0, k = 0;
        vector<int> ans;
        unordered_map<int, int> count;
        for (size_t j = 0; j < ordered.size(); ++j) {
            if (! count[ordered[j].second]++) ++k;
            if (k == nums.size()) { 
                while (count[ordered[i].second] > 1) --count[ordered[i++].second]; // minialize range
                if (ans.empty() || ans[1] - ans[0] > ordered[j].first - ordered[i].first) {
                    ans = vector<int>{ordered[i].first, ordered[j].first};
                }
            }
        }
        return ans; 
    }   
};
















