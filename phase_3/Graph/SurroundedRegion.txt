class Solution {
public:
    bool isPossible(vector<vector<char>>& board,int row,int col){
        if(board[row+1][col] == 'X' and board[row][col-1] == 'X' and board[row+1][col] == 'X')
        {
            return true; 
        }

        if(board[row-1][col] == 'X' and board[row][col-1] == 'X' and board[row][col+1] == 'X'){
            return true; 
        }

        if(board[row][col+1] == 'X' and board[row-1][col] == 'X' and board[row+1][col] == 'X'){
            return true; 
        }

        if(board[row+1][col] == 'X' and board[row][col-1] == 'X' and board[row][col+1] == 'X'){
            return true; 
        }

        return false; 
    }

    void solve1(vector<vector<char>>& board,int row,int col){
        if(row == (board.size()-1) or (col == board[0].size()-1) or row == 0 or col == 0 or board[row][col] == 'X'){
            return; 
        }

        int row1[] = {-1,1,0,0}; 
        int col1[] = {0,0,-1,1}; 
        // cout << row << " " << col << endl; 
        if(isPossible(board,row,col) and board[row][col] == 'O'){
            board[row][col] = 'X'; 
        }

        for(int i = 0; i < 4; i ++)
        {
            int newR = row + row1[i]; 
            int newC = col + col1[i]; 

            if(newR >= 0 and newC >= 0 and newR < board.size() and newC < board[0].size() and board[row][col]){
                solve1(board,newR,newC); 
            }
        }

    }

    void dfs(vector<vector<char>>& board,int row,int col){
        if(row < 0 or row >= board.size() or col < 0 or col >= board[0].size()){
            return; 
        }

        if(board[row][col] != 'O'){
            return; 
        }

        board[row][col] = '1'; 
        dfs(board,row+1,col); 
        dfs(board,row,col+1); 
        dfs(board,row-1,col); 
        dfs(board,row,col-1); 
        return; 
    }

    void solve(vector<vector<char>>& board) {

        // appraoch 1: using dfs 
        // for(int i = 0; i < board.size(); i ++){
        //     for(int j = 0; j < board[0].size(); j ++){
        //         if(board[i][j] == 'O'){
        //             solve1(board,i,j);
        //         }
        //     }
        // }

        // appraoch 2: using dfs 
        

        // first go and visit the boundry row 
        if(board.size()==0||board[0].size()==0)return;

        for(int i = 0; i < board[0].size(); i ++){
            if(board[0][i] == 'O'){
                dfs(board,0,i);
            }

            if(board[board.size()-1][i] == 'O'){
                dfs(board,board.size()-1,i); 
            }
        }

        for(int i=1;i<board.size()-1;i++){
            if(board[i][0]=='O')dfs(board,i,0);
            if(board[i][board[0].size()-1]=='O'){dfs(board,i,board[0].size()-1);}
        }

        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]!='1')board[i][j]='X';
                if(board[i][j]=='1')board[i][j]='O';
            }
        }


    }
};