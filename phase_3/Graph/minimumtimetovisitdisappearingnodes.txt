class Solution {
public:
    vector<int> dis,vis; 
    unordered_map<int,vector<pair<int,int>>> adj; 
    void djkstras(int src,vector<int> &disappear)
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq; 
        pq.push({0,src});  // dis,src 

        while(!pq.empty()){
            auto it = pq.top(); 
            pq.pop(); 

            int node = it.second; 
            int d = it.first; 

            if(vis[node] or d >= disappear[node]){
                continue; 
            }

            dis[node] = d; // initialise the distance
            vis[node] = 1; // visit node

            for(auto ne : adj[node]){
                if(vis[ne.first] == 0){
                    pq.push({d + ne.second,ne.first});
                }
            }
        }
    }

    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        // in depth djkstras algorithm 
        // for(auto edge : edges){
        //     int u = edge[0]; 
        //     int v = edge[1]; 
        //     int w = edge[2]; 
        //     adj[u].push_back({v,w}); 
        //     adj[v].push_back({u,w}); 
        // }

        // cout << "no errror in getting adj list"<<endl; 
        // dis = vector<int>(n,-1); 
        // vis = vector<int>(n,0); 
        // cout << "no errror in creating 2 vectors"<<endl; 

        // djkstras(0,disappear); 
        // cout << "no errror in getting djkstras algorithm"<<endl; 
        // return dis; 
 
        // practise 
        vector<int> answer(n,-1),visited(n,0); 
        vector<pair<int,int>> adj[n];   

        for(auto it : edges){
            int from = it[0]; 
            int to = it[1]; 
            int cost = it[2]; 

            adj[from].push_back({to,cost}); 
            adj[to].push_back({from,cost}); 
        }
        cout << "no errror in getting adj list"<<endl;

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq; 
        pq.push({0,0}); 
        cout << "no errror in creating priority queue"<<endl;
        while(!pq.empty()){
            auto best = pq.top(); 
            pq.pop(); 
            cout << best.first << " " << best.second << endl; 
            if(best.first >= disappear[best.second] or visited[best.second]){
                continue; 
            }

            answer[best.second] = best.first; 
            visited[best.second] = 1; 

            for(auto it : adj[best.second]){
                if(!visited[it.first]){
                    pq.push({best.first + it.second,it.first});
                }
            }
        }
        return answer;  
    }
};