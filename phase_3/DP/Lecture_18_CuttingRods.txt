//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution{
  public:
    int approach1(int price[],int ind,int n){
        if(ind == 0){
            return n*price[0]; 
        }
        
        int nonTake = approach1(price,ind-1,n); 
        int take = INT_MIN; 
        int rodLength = ind+1; 
        if(rodLength <= n){
            take = price[ind] + approach1(price,ind,n-rodLength); 
        }
        return max(take,nonTake); 
    }
    
    int approach2(vector<vector<int>> &dp,int price[],int ind,int n){
        if(ind == 0){
            return n*price[0]; 
        }
        
        
        if(dp[ind][n] != -1){
            return dp[ind][n]; 
        }
        
        int rodLength = ind+1; 
        int take = INT_MIN; 
        
        int nontake = approach2(dp,price,ind-1,n); 
        if(rodLength <= n){
            take = price[ind] + approach2(dp,price,ind,n-rodLength); 
        }
        
        dp[ind][n] = max(take,nontake); 
        return dp[ind][n]; 
    }
    
    int cutRod(int price[], int n) {
        //code here
        // return approach1(price,n-1,n);
        
        // approach 2: using memoisation
        // vector<vector<int>> dp(n,vector<int>(n+1,-1)); 
        // return approach2(dp,price,n-1,n); 
        
        // approach 3: using tabulation
        vector<vector<int>> dp(n,vector<int> (n+1,0)); 
        for(int i = 0; i <= n; i ++){
            dp[0][i] = i*price[0];
        }
        
        for(int i = 1; i < n; i ++){
            for(int j = 0; j <= n; j ++){
                int nonTake = dp[i-1][j]; 
                int take = INT_MIN; 
                int rodLength = i + 1; 
                if(rodLength <= j){
                    take = price[i] + dp[i][j-rodLength]; 
                }
                dp[i][j] = max(take,nonTake); 
            }
        }

        return dp[n-1][n];
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) 
            cin >> a[i];
            
        Solution ob;

        cout << ob.cutRod(a, n) << endl;
    }
    return 0;
}
// } Driver Code Ends