pick and non pick: 

class Solution {
    void solve(vector<vector<int>> &ans,vector<int> &sample,vector<int> &nums,int index){
        if(index == nums.size()){
            return; 
        }

        // for(int i = index; i < nums.size(); i ++){
            // sample.push_back(nums[i]);
            // ans.push_back(sample); 
            // solve(ans,sample,nums,i+1); 
            // sample.pop_back();  
        // }

        // using pick or non pick
        sample.push_back(nums[index]);
        ans.push_back(sample); 
        solve(ans,sample,nums,index+1); 
        sample.pop_back();  
        solve(ans,sample,nums,index+1); 
        // ans.push_back(sample); 
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans; 
        vector<int> sample; 
        ans.push_back(sample); 
        solve(ans,sample,nums,0); 
        return ans;    
    }
};


// main code below


class Solution {
public:
    int f(int size,vector<int> &nums){
        if(size == 0){
            return nums[size]; 
        }

        if(size < 0){
            return 0; 
        }


        int pick = nums[size] + f(size-2,nums);
        int nonpick = f(size-1,nums);
        return max(pick,nonpick); 
    }

    int f1(int size,vector<int> &nums,vector<int> &dp){
        if(size == 0){
            return nums[size]; 
        }

        if(size < 0){
            return 0; 
        }

        if(dp[size] != -1){
            return dp[size]; 
        }

        int pick = nums[size] + f1(size-2,nums,dp);
        int nonpick = f1(size-1,nums,dp);
        dp[size] = max(pick,nonpick); 
        return max(pick,nonpick); 
    }

    int rob(vector<int>& nums) {
        // int evenSum = 0,oddSum = 0; 
        // for(int i = 0; i < nums.size(); i +=2){
        //     evenSum += nums[i]; 
        // }

        // for(int i = 1; i < nums.size(); i += 2){
        //     oddSum += nums[i]; 
        // }

        // int summax = 0; 
        // int prevInd = 0; 
        // for(int i = 1; i < nums.size(); i ++){
        //     if(prevInd != )
        // }

        // return max(evenSum,oddSum); 

        // not optmised appraoch 
        // int n = nums.size(); 
        // return f(n-1,nums); 

        // optimised appraoch using dynamic programming 
        int n = nums.size(); 
        vector<int> dp(n,-1); 
        return f1(n-1,nums,dp); 
    }
};