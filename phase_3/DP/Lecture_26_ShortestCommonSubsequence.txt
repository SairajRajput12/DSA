class Solution {
public:
    int lcs(vector<vector<int>> &dp,int index1,int index2,string str1,string str2){
        if(index1 == str1.size() or index2 == str2.size()){
            return 0; 
        }

        if(dp[index1][index2] != -1){
            return dp[index1][index2]; 
        }


        int ans = 0; 
        if(str1[index1] == str2[index2]){
            ans = 1 + lcs(dp,index1+1,index2+1,str1,str2); 
        }
        else{
            ans = max(lcs(dp,index1+1,index2,str1,str2),lcs(dp,index1,index2+1,str1,str2)); 
        }
        return dp[index1][index2] = ans; 
    }

    string shortestCommonSupersequence(string str1, string str2) {

        // approach 1: my approach 2 pointer
        // string answer = ""; 
        // int start1 = 0,start2 = 0; 
        // int end1 = str1.size()-1,end2 = str2.size()-1; 

        // while(start1 <= end1 and start2 <= end2){
        //     if(str1[start1] == str2[start2]){
        //         answer.push_back(str1[start1]); 
        //         start1 ++; 
        //         start2 ++; 
        //     }
        //     else if(str1[start1] > str2[start2]){
        //         answer.push_back(str1[start1]); 
        //         start1 ++; 
        //     }
        //     else{
        //         answer.push_back(str2[start2]); 
        //         start2 ++; 
        //     }
        // }

        // while(start1 <= end1){
        //     answer.push_back(str1[start1]); 
        //     start1 ++; 
        // }

        // while(start2 <= end2){
        //     answer.push_back(str2[start2]); 
        //     start2 ++; 
        // }


        
        // return answer; 

        // approach 2: using memoisation 
        vector<vector<int>> dp(str1.size()+1,vector<int> (str2.size()+1,-1)); 
        int m = lcs(dp,0,0,str1,str2); 
        int i = 0;
        int j = 0; 
        string ans = ""; 
        while(i < str1.size() and j < str2.size()){
            if(str1[i] == str2[j]){
                ans += str1[i]; 
                i ++,j ++; 
            }
            else if(dp[i+1][j] > dp[i][j+1]){
                ans += str1[i]; 
                i ++; 
            }
            else{
                ans += str2[j]; 
                j ++; 
            }
        }

        while(i < str1.size()){
            ans += str1[i]; 
            i ++; 
        }

        while(j < str2.size()){
            ans += str2[j]; 
            j ++; 
        }

        return ans; 


        // approach 3: using dynamic programming 
        // int m = str1.size(),n = str2.size(); 
        // vector<vector<int>> dp(m+1,vector<int>(n+1,0)); 

        // for (int i = 0; i <= m; i++) {
        //     dp[i][0] = 0;
        // }
        // for (int i = 0; i <= n; i++) {
        //     dp[0][i] = 0;
        // }

        // for(int i = 1; i <= m; i ++){
        //     for(int j = 1; j <= n; j ++){
        //         if(str1[i-1] == str2[j-1]){
        //             dp[i][j] = 1 + dp[i-1][j-1]; 
        //         }
        //         else{
        //             dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        //         }
        //     }
        // }


        // string ans = "";
        // int i = m,j = n; 
        // int len = dp[m][n]; 
        // int index = len - 1; 


        // while(i > 0 and j > 0){
        //     if(str1[i-1] == str2[j-1]){
        //         ans += str1[i-1]; 
        //         i--,j--; 
        //     }
        //     else if(dp[i-1][j] > dp[i][j-1]){
        //         ans += str1[i-1]; 
        //         i --; 
        //     }
        //     else{
        //         ans += str2[j-1]; 
        //         j --; 
        //     }


        // }
        // while(i > 0){
        //     ans += str1[i-1]; 
        //     i --; 
        // }

        // while(j > 0){
        //     ans += str2[j-1]; 
        //     j --; 
        // }

        // reverse(ans.begin(),ans.end());

        // return ans; 
    }
};