class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {

        // approach 1: my approach 2 pointer
        // string answer = ""; 
        // int start1 = 0,start2 = 0; 
        // int end1 = str1.size()-1,end2 = str2.size()-1; 

        // while(start1 <= end1 and start2 <= end2){
        //     if(str1[start1] == str2[start2]){
        //         answer.push_back(str1[start1]); 
        //         start1 ++; 
        //         start2 ++; 
        //     }
        //     else if(str1[start1] > str2[start2]){
        //         answer.push_back(str1[start1]); 
        //         start1 ++; 
        //     }
        //     else{
        //         answer.push_back(str2[start2]); 
        //         start2 ++; 
        //     }
        // }

        // while(start1 <= end1){
        //     answer.push_back(str1[start1]); 
        //     start1 ++; 
        // }

        // while(start2 <= end2){
        //     answer.push_back(str2[start2]); 
        //     start2 ++; 
        // }


        
        // return answer; 

        // approach 2: using dynamic programming 
        int m = str1.size(),n = str2.size(); 
        vector<vector<int>> dp(m+1,vector<int>(n+1,0)); 

        for (int i = 0; i <= m; i++) {
            dp[i][0] = 0;
        }
        for (int i = 0; i <= n; i++) {
            dp[0][i] = 0;
        }

        for(int i = 1; i <= m; i ++){
            for(int j = 1; j <= n; j ++){
                if(str1[i-1] == str2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1]; 
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }


        string ans = "";
        int i = m,j = n; 
        int len = dp[m][n]; 
        int index = len - 1; 


        while(i > 0 and j > 0){
            if(str1[i-1] == str2[j-1]){
                ans += str1[i-1]; 
                i--,j--; 
            }
            else if(dp[i-1][j] > dp[i][j-1]){
                ans += str1[i-1]; 
                i --; 
            }
            else{
                ans += str2[j-1]; 
                j --; 
            }


        }
        while(i > 0){
            ans += str1[i-1]; 
            i --; 
        }

        while(j > 0){
            ans += str2[j-1]; 
            j --; 
        }

        reverse(ans.begin(),ans.end());

        return ans; 
    }
};