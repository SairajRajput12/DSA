int f(int day,int ind,vector<vector<int>> &points,vector<vector<int>> &dp){
    if(day == 0){
        int maxi = 0; 
        for(int i = 0; i < 3; i ++){
            if(i != ind){
                maxi = max(maxi,points[0][i]); 
            }
        }
        return maxi;
    }

    if(dp[day][ind] != -1){
        return dp[day][ind]; 
    }

    int maxi = 0; 
    for(int i = 0; i < 3; i ++){
            if(i != ind){
                int points1 = points[day][i] + f(day-1,i,points,dp); 
                maxi = max(maxi,points1); 
            }
    }
    dp[day][ind] = maxi; 
    return maxi;     
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here. 

    // dp with memomisation
    // vector<vector<int>> dp(n,vector<int> (4,-1)); 
    // return f(n-1,3,points,dp); 

    // dp with tabulation 
    vector<vector<int>> dp(n,vector<int>(4,0)); 
    dp[0][0] = max(points[0][1],points[0][2]); 
    dp[0][1] = max(points[0][2],points[0][0]); 
    dp[0][2] = max(points[0][1],points[0][0]); 
    dp[0][3] = max(points[0][0],max(points[0][1],points[0][2])); 

    for(int day = 1; day < n; day ++){
        for(int last = 0; last < 4; last ++){
            dp[day][last] = 0; 
            int maxi = 0;
            for(int task = 0; task < 3; task ++){
                if(task != last){
                    int point = points[day][task] + dp[day-1][task];
                    maxi = max(maxi,point);
                }
            }
            dp[day][last] = maxi; 
        }
    }

    return dp[n-1][3];

}