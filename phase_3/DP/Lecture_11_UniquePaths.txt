class Solution {
public:
    int getAns(int m,int n,int row,int col){
        if(row == (m-1) and col == (n-1)){
            return 1; 
        }

        if(row >= m or col >= n){
            return 0;  
        }

        int answer = 0; 
        answer = getAns(m,n,row+1,col) + getAns(m,n,row,col+1); 
        return answer; 
    }

    int getOptimisedAns(int m,int n,int row,int col,vector<vector<int>> &dp){
        if(row == (m-1) and col == (n-1)){
            return 1; 
        }

        if(dp[row][col] != -1){
            return dp[row][col]; 
        }

        int answer = 0; 
        if(row < m-1){
            answer += getOptimisedAns(m,n,row+1,col,dp); 
        }

        if(col < n-1){
            answer += getOptimisedAns(m,n,row,col+1,dp); 
        }
        dp[row][col] = answer; 
        return answer; 
    }


    int uniquePaths(int m, int n) {
        // using backtracking
        // int answer = getAns(m,n,0,0); 

        // above code throws TLE: 

        // approach 2: using dp; 
        // vector<vector<int>> dp(m,vector<int>(n,-1));  
        // int answer = getOptimisedAns(m,n,0,0,dp); 
        // return answer;

        // approach 3: using tabulation 
        // vector<vector<int>> dp(m,vector<int>(n,-1)); 
        // dp[0][0] = 1; 
        // for(int i = 0; i < n; i ++){
        //     for(int j = 0; j < m; j ++){
        //         if(i == 0 and j == 0){
        //             dp[i][j] = 1; 
        //         }
        //         else{
        //             if(i < m-1){
        //                 int up = dp[i+1][j]; 
        //                 dp[i][j] += up; 
        //             }

        //             if(j < n-1){
        //                 int left = dp[i][j+1]; 
        //                 dp[i][j] += left; 
        //             }

        //             // dp[i][j] = up+left; 
        //         }
        //     }
        // }

        // return dp[m-1][n-1];

        // approach 3: using dp
        int dp[m][n];
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(i == 0 || j == 0)
                    dp[i][j] = 1;
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
        return dp[m-1][n-1];              
    }
};