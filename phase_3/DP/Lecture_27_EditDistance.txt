// bokuga kirada......
class Solution {
public:
    int approach1(string &word1,int ind1,string &word2,int ind2){
        if(ind1 < 0){
            return (ind2 + 1); 
        }

        if(ind2 < 0){
            return (ind1 + 1); 
        }

        if(word1[ind1] == word2[ind2]){
            return approach1(word1,ind1-1,word2,ind2-1); 
        }

        int x = 1 + approach1(word1,ind1,word2,ind2-1);
        int y = 1 + approach1(word1,ind1-1,word2,ind2); 
        int z = 1 + approach1(word1,ind1-1,word2,ind2-1);  
        
        return min(x,min(y,z)); 
        // in min function the first call is for insertion where due to insertion of jth character from word2 in word1 causes only change in j not in i.
        // the deletion operation causes deletion of current character means only change in ith and replace means change of both,


    }

    int approach2(string &word1,int ind1,string &word2,int ind2,vector<vector<int>> &dp){
        if(ind1 == 0){
            return (ind2); 
        }

        if(ind2 == 0){
            return (ind1); 
        }

        if(dp[ind1][ind2] != -1){
            return dp[ind1][ind2]; 
        }


        if(word1[ind1-1] == word2[ind2-1]){
            return dp[ind1][ind2] = approach2(word1,ind1-1,word2,ind2-1,dp); 
        }

        int x = 1 + approach2(word1,ind1,word2,ind2-1,dp);
        int y = 1 + approach2(word1,ind1-1,word2,ind2,dp); 
        int z = 1 + approach2(word1,ind1-1,word2,ind2-1,dp);  
        
        return dp[ind1][ind2] = min(x,min(y,z)); 

    }



    int minDistance(string word1, string word2) {
        // appraoch 1: using recursion 
        // return approach1(word1,word1.size(),word2,word2.size());

        // approach 2: using memoisation with right shift
        // vector<vector<int>> dp(word1.size()+1,vector<int> (word2.size()+1,-1)); 
        // return approach2(word1,word1.size(),word2,word2.size(),dp);  

        // approach 3: using tabulation

        vector<vector<int>> dp(word1.size()+1,vector<int> (word2.size()+1,0));

        int n = word1.size(); 
        int m = word2.size(); 

        for(int i = 0; i <= n; i ++){
            dp[i][0] = i; 
        }

        for(int j = 0; j <= m; j ++){
            dp[0][j] = j; 
        }

        for(int i = 1; i <= n; i ++){
            for(int j = 1; j <= m; j ++){
                if(word1[i-1] == word2[j-1]){
                    dp[i][j] = dp[i-1][j-1]; 
                }
                else{
                    dp[i][j] = 1 + min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1])); 
                }
            }
        }
        return dp[word1.size()][word2.size()];
    }
};