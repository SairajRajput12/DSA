class Solution {
public:
    int approach1(int index,vector<int> &prices,int buy){
        // buy -> 1 => we can buy a stock 
        // buy -> 0 => we can not buy a stock instead we sell it. 

        if(index == prices.size()){
            return 0; 
        }

        int Profit = 0;
        if(buy == 1){
            // means if i can buy then there will be 2 possibility: 
            // 1 -> i will purchase that stock and substract it from my profit 
            // 2 -> i will not purchase it and move forward 
            Profit = max((approach1(index+1,prices,0)-prices[index]),(approach1(index+1,prices,1)));
        }
        else{
            Profit = max((prices[index] + approach1(index+1,prices,1)),approach1(index+1,prices,0));
            // means if i cannot buy then there will be 2 possibility: 
            // 1 -> i will sold the stock and substract it from my profit 
            // 2 -> i will not purchase it and move forward.
        }
        return Profit; 
    }

    int approach2(int index,vector<int> &prices,int buy,vector<vector<int>> &dp){
        if(index == prices.size()){
            return 0; 
        }

        if(dp[index][buy] != -1){
            return dp[index][buy];
        }

        if(buy){
            dp[index][buy] = max((approach2(index+1,prices,0,dp)-prices[index]),approach2(index+1,prices,1,dp));         
        }
        else{
            dp[index][buy] = max((approach2(index+1,prices,1,dp)+prices[index]),approach2(index+1,prices,0,dp)); 
        }

        return dp[index][buy]; 
    }
    int maxProfit(vector<int>& prices) {

        // using recursion -> approach1
        // return approach1(0,prices,1);

        // using memoisation -> approach 2 
        // vector<vector<int>> dp(prices.size()+1,vector<int> (2,-1)); 
        // return approach2(0,prices,1,dp);

        // using tabulation: 
        // there are 3 steps are involved: 
        // 1. write down base cases. 
        // 2. express chainging parameters 
        // 3. copy recurrence 

        vector<vector<int>> dp(prices.size()+1,vector<int> (2,0)); 
        dp[prices.size()][0] = 0, dp[prices.size()][1] = 0; 

        for(int i = (prices.size()-1); i >= 0;i --){
            for(int buy = 0; buy <= 1; buy ++){
                int profit = 0; 
                if(buy == 1){
                    profit = max(dp[i+1][0] - prices[i],dp[i+1][1]);
                }
                else{
                    profit = max(dp[i+1][1]+prices[i],dp[i+1][0]); 
                }
                dp[i][buy] = profit; 
            }
        }

        return dp[0][1]; 
    }
};