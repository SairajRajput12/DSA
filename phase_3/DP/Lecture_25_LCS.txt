class Solution {
public:
    int f(int ind1,int ind2,string text1,string text2){
        if(ind1 < 0 or ind2 < 0){
            return 0; 
        }

        if(text1[ind1] == text2[ind2]) {
            return 1 + f(ind1-1,ind2-1,text1,text2); 
        }
        return (0+max(f(ind1-1,ind2,text1,text2),f(ind1,ind2-1,text1,text2)));
    }

    int approach(int ind1,int ind2,string &text1,string &text2,vector<vector<int>> &dp){
        // if(ind1 < 0 or ind2 < 0){
        //     return 0; 
        // }

        if(ind1 == 0 or ind2 == 0){
            return 0; 
        }

        if(dp[ind1][ind2] != -1){
            return dp[ind1][ind2]; 
        }


        if(text1[ind1-1] == text2[ind2-1]){
            dp[ind1][ind2] =  1 + approach(ind1-1,ind2-1,text1,text2,dp); 
            return dp[ind1][ind2]; 
        }
        else{
            return dp[ind1][ind2] = (max(approach(ind1-1,ind2,text1,text2,dp),approach(ind1,ind2-1,text1,text2,dp)));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {

        // approach 1: using recursion
        // return f(text1.size()-1,text2.size()-1,text1,text2);

        // approach 2: using memoisation
        // vector<vector<int>> dp(1001,vector<int>(1001,-1)); 

        // before shifting
        // return approach(text1.size()-1,text2.size()-1,text1,text2,dp);
        
        // after shifting
        // return approach(text1.size(),text2.size(),text1,text2,dp);

        // approach 3: using tabulation

        // shifting of the index in this case
        int n = text1.size(),m = text2.size(); 
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1)); 

        for(int i = 0;  i <= n; i ++){
            dp[i][0] = 0; 
        }

        for(int i = 0;  i <= m; i ++){
            dp[0][i] = 0; 
        }

        for(int i = 1; i <= n; i ++){
            for(int j = 1; j <= m; j ++){
                if(text1[i-1] == text2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1]; 
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]); 
                }
            }
        }
        return dp[n][m]; 
    }
};