class Solution {
public:
    int approach1(vector<int> &prices,int index,int buy,int cap){
        if(cap == 2){
            return 0; 
        }

        if(index == prices.size()){
            return 0; 
        }

        int maxProfit = 0; 
        if(buy){
            maxProfit = max(approach1(prices,index+1,0,cap)-prices[index],approach1(prices,index+1,1,cap)); 
        }
        else{
            maxProfit = max(approach1(prices,index+1,1,cap+1)+prices[index],approach1(prices,index+1,0,cap)); 
        }
        return maxProfit;
    }

    int approach2(vector<int> &prices,int index,int buy,int cap,vector<vector<vector<int>>> &dp){

        if(index == prices.size()){
            return 0; 
        }

        if(cap == 2){
            return 0; 
        }

        if(dp[index][buy][cap] != -1){
            return dp[index][buy][cap]; 
        }

        int profit = 0; 
        if(buy){
            profit = max(approach2(prices,index+1,0,cap,dp)-prices[index],approach2(prices,index+1,1,cap,dp)); 
        }
        else{
            profit = max(approach2(prices,index+1,1,cap+1,dp) + prices[index],approach2(prices,index+1,0,cap,dp));
        }

        dp[index][buy][cap] = profit; 

        return profit; 
    }

    int maxProfit(vector<int>& prices) {
        // approach 1: using recursion 
        // return approach1(prices,0,1,0);

        // approach 2: using memoisation
        // vector<vector<vector<int>>> dp(prices.size()+1,vector<vector<int>> (2,vector<int>(3,-1)));
        // return approach2(prices,0,1,0,dp); 

        // approach 3: using tabulation

        vector<vector<vector<int>>> dp(prices.size()+1,vector<vector<int>>(2,vector<int>(3,0))); 

        for(int i = (prices.size()-1); i >= 0; i --){
            for(int j = 0; j < 2; j ++){
                for(int z = 1; z <= 2; z ++){
                    int profit = 0; 
                    if(j == 1){
                        profit = max(dp[i+1][0][z]-prices[i],dp[i+1][1][z]); 
                    }
                    else{
                        profit = max(dp[i+1][1][z-1]+prices[i],dp[i+1][0][z]); 
                    }
                    dp[i][j][z] = profit; 
                }
            }
        }

        return dp[0][1][2]; 
    }
};