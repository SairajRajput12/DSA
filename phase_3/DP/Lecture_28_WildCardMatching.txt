class Solution {
public:
    bool isAllStars(string &S1, int i) {
        // S1 is taken in 1-based indexing
        for (int j = 1; j <= i; j++) {
            if (S1[j - 1] != '*')
                return false;
        }
        return true;
    }

    
    bool approach1(string &s,int ind1,string &p,int ind2){
        
        if(ind1 == 0 and ind2 == 0){
            return true; 
        }

        if(ind1 == 0 and ind2 > 0){
            return false; 
        }

        if(ind1 >  0 and ind2 == 0){
            for(int i = 0; i <= (ind1-1); i ++){
                if(s[i] != '*'){
                    return false; 
                }
            }
            return true; 
        }

        if(s[ind1-1] == p[ind2-1] or s[ind1-1] == '?'){
            return approach1(s,ind1-1,p,ind2-1); 
        }
        
        
        if(s[ind1-1] == '*'){
            return approach1(s,ind1-1,p,ind2) or approach1(s,ind1,p,ind2-1); 
        }

        

        return false; 
    }

    bool approach2(string &s,int ind1,string &p,int ind2,vector<vector<int>> &dp){
        if(ind1 == 0 and ind2 == 0){
            return true; 
        }

        if(ind2 == 0 and ind1 > 0){
            return false; 
        }

        if(ind1 == 0 and ind2 > 0){
            for(int i = 1; i <= (ind2); i ++){
                if(p[i-1] != '*'){
                    return false; 
                }
            }
            return true; 
        }

        if(dp[ind1][ind2] != -1){
            return dp[ind1][ind2]; 
        }

        if(s[ind1-1] == p[ind2-1] or p[ind2-1] == '?'){
            return dp[ind1][ind2] = approach2(s,ind1-1,p,ind2-1,dp); 
        }

        if(p[ind2-1] == '*'){
            return dp[ind1][ind2] = (approach2(s,ind1-1,p,ind2,dp) or approach2(s,ind1,p,ind2-1,dp));
        }

        return dp[ind1][ind2] = false; 
    }

    bool isMatch(string s, string p) {
        // approach 1: using recursion 
        // return approach1(p,p.size(),s,s.size());
    
        // approach 2: using memoisation
        // vector<vector<int>> dp(s.size()+1,vector<int> (p.size()+1,-1)); 
        // return approach2(s,s.size(),p,p.size(),dp);

        // approach 3: using tabulation
        // steps of tabulation 
        // express base case 
        // express changing parameters
        // copy recurrence 
        // return the sum 

        vector<vector<bool>> dp(s.size()+1,vector<bool>(p.size()+1,false));
        dp[0][0] = true; 

        for(int i = 1; i <= s.size(); i ++){
            dp[i][0] = false; 
        }

        for(int i = 1; i <= p.size(); i ++){
            dp[0][i] = isAllStars(p, i);
        }

        for(int i = 1; i <= s.size(); i ++){
            for(int j = 1; j <= p.size(); j ++){
                if(s[i-1] == p[j-1] or p[j-1] == '?'){
                    dp[i][j] = dp[i-1][j-1]; 
                }
                else{
                    if(p[j-1] == '*'){
                        dp[i][j] = (dp[i-1][j] or dp[i][j-1]);
                    }
                    else{
                        dp[i][j] = false; 
                    }
                }
            }
        }

        return dp[s.size()][p.size()];
    }
};